[
    {
        "id": "f7c23e1a.b3c8a",
        "type": "tab",
        "label": "Professional BAS Control System",
        "disabled": false,
        "info": "Professional Data Center Building Automation System (BAS) HMI\n\nDemonstrates:\n- Industrial HVAC control expertise\n- Professional alarm management\n- P/I/D control theory knowledge\n- Lead/Lag/Standby staging sequences\n- Real-time performance monitoring\n- Comprehensive KPI tracking\n- Fault injection and diagnostics\n\nDesigned for portfolio demonstration to potential employers in BAS/HVAC industry."
    },
    {
        "id": "ui_base",
        "type": "ui_base",
        "theme": {
            "name": "theme-professional-bas",
            "lightTheme": {
                "default": "#004B87",
                "baseColor": "#004B87",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#003366",
                "baseColor": "#003366",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Professional BAS Theme",
                "default": "#004B87",
                "baseColor": "#004B87",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#004B87",
                    "value": "#004B87",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#004B87",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#f8f9fa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1f2937",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#d1d5db",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Data Center BAS Professional HMI",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "top_bar_group",
        "type": "ui_group",
        "name": "System Status Bar",
        "tab": "f7c23e1a.b3c8a",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": "top-bar-group"
    },
    {
        "id": "crac_cards_group",
        "type": "ui_group",
        "name": "CRAC Equipment Status",
        "tab": "f7c23e1a.b3c8a",
        "order": 2,
        "disp": true,
        "width": "18",
        "collapse": false,
        "className": "crac-cards-group"
    },
    {
        "id": "alarms_group",
        "type": "ui_group",
        "name": "Alarm Management",
        "tab": "f7c23e1a.b3c8a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": "alarms-group"
    },
    {
        "id": "charts_group",
        "type": "ui_group",
        "name": "Performance Analysis",
        "tab": "f7c23e1a.b3c8a",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": "charts-group"
    },
    {
        "id": "controls_group",
        "type": "ui_group",
        "name": "System Controls",
        "tab": "f7c23e1a.b3c8a",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": "controls-group"
    },
    {
        "id": "kpi_group",
        "type": "ui_group",
        "name": "Key Performance Indicators",
        "tab": "f7c23e1a.b3c8a",
        "order": 6,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": "kpi-group"
    },
    {
        "id": "top_status_bar",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "top_bar_group",
        "name": "Professional Top Status Bar",
        "order": 1,
        "width": "24",
        "height": "2",
        "format": "<div class=\"professional-top-bar\">\n    <div class=\"site-info\">\n        <div class=\"site-name\">DATACENTER-DC01</div>\n        <div class=\"scenario-name\">{{scenario_name || 'Baseline Operation'}}</div>\n    </div>\n    \n    <div class=\"simulation-status\">\n        <div class=\"sim-time\">\n            <label>Simulation Time:</label>\n            <span class=\"time-value\">{{sim_time || '00:00:00'}}</span>\n            <span class=\"realtime-factor\">({{realtime_factor || '1.0'}}×)</span>\n        </div>\n    </div>\n    \n    <div class=\"temperature-status\">\n        <div class=\"setpoint\">\n            <label>Setpoint:</label>\n            <span class=\"sp-value\">{{setpoint_f || '72'}}°F</span>\n            <span class=\"deadband\">(±{{deadband_f || '1'}}°F)</span>\n        </div>\n        <div class=\"current-temp\">\n            <label>Room Temp:</label>\n            <span class=\"temp-value\" ng-class=\"getTempClass()\">{{room_temp_f || '72.0'}}°F</span>\n        </div>\n        <div class=\"temp-error\">\n            <label>Error:</label>\n            <span class=\"error-value\" ng-class=\"getErrorClass()\">{{temp_error_f || '0.0'}}°F</span>\n        </div>\n    </div>\n    \n    <div class=\"crac-roles\">\n        <div class=\"role-badge lead\">LEAD: {{lead_unit || 'CRAC-01'}}</div>\n        <div class=\"role-badge lag\">LAG: {{lag_unit || 'CRAC-02'}}</div>\n        <div class=\"role-badge standby\">STANDBY: {{standby_unit || 'CRAC-03'}}</div>\n    </div>\n</div>\n\n<style>\n.professional-top-bar {\n    background: linear-gradient(135deg, #004B87 0%, #0056A3 100%);\n    color: white;\n    padding: 12px 20px;\n    border-radius: 6px;\n    box-shadow: 0 3px 10px rgba(0,0,0,0.15);\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n\n.site-info {\n    display: flex;\n    flex-direction: column;\n    gap: 2px;\n}\n\n.site-name {\n    font-size: 18px;\n    font-weight: 700;\n    color: white;\n}\n\n.scenario-name {\n    font-size: 12px;\n    color: rgba(255,255,255,0.8);\n    text-transform: uppercase;\n    font-weight: 500;\n}\n\n.simulation-status, .temperature-status {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    text-align: center;\n}\n\n.sim-time, .setpoint, .current-temp, .temp-error {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 12px;\n}\n\n.sim-time label, .setpoint label, .current-temp label, .temp-error label {\n    color: rgba(255,255,255,0.7);\n    font-weight: 500;\n    min-width: 80px;\n    text-align: left;\n}\n\n.time-value, .sp-value, .temp-value, .error-value {\n    font-family: 'Courier New', monospace;\n    font-size: 14px;\n    font-weight: 700;\n    padding: 2px 6px;\n    background: rgba(255,255,255,0.1);\n    border-radius: 3px;\n}\n\n.realtime-factor, .deadband {\n    font-size: 10px;\n    color: rgba(255,255,255,0.6);\n}\n\n.temp-value.normal { color: #28a745; }\n.temp-value.warning { color: #ffc107; }\n.temp-value.critical { color: #dc3545; }\n\n.error-value.normal { color: #28a745; }\n.error-value.warning { color: #ffc107; }\n.error-value.critical { color: #dc3545; }\n\n.crac-roles {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n}\n\n.role-badge {\n    padding: 3px 8px;\n    border-radius: 3px;\n    font-size: 11px;\n    font-weight: 600;\n    text-align: center;\n    min-width: 100px;\n}\n\n.role-badge.lead {\n    background: #28a745;\n    color: white;\n}\n\n.role-badge.lag {\n    background: #fd7e14;\n    color: white;\n}\n\n.role-badge.standby {\n    background: #6c757d;\n    color: white;\n}\n\n@media (max-width: 1200px) {\n    .professional-top-bar {\n        flex-direction: column;\n        gap: 10px;\n        text-align: center;\n    }\n    \n    .simulation-status, .temperature-status, .crac-roles {\n        flex-direction: row;\n        justify-content: center;\n    }\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.getTempClass = function() {\n        const temp = parseFloat(scope.room_temp_f || 72);\n        const sp = parseFloat(scope.setpoint_f || 72);\n        const error = Math.abs(temp - sp);\n        \n        if (error <= 1) return 'normal';\n        if (error <= 2) return 'warning';\n        return 'critical';\n    };\n    \n    scope.getErrorClass = function() {\n        const error = Math.abs(parseFloat(scope.temp_error_f || 0));\n        \n        if (error <= 1) return 'normal';\n        if (error <= 2) return 'warning';\n        return 'critical';\n    };\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 200,
        "y": 60,
        "wires": [[]]
    },
    {
        "id": "crac_equipment_cards",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "crac_cards_group",
        "name": "CRAC Equipment Cards",
        "order": 1,
        "width": "18",
        "height": "8",
        "format": "<div class=\"crac-equipment-cards\">\n    <div class=\"crac-card\" ng-repeat=\"crac in cracUnits track by crac.id\">\n        <div class=\"card-header\" ng-class=\"getHeaderClass(crac)\">\n            <div class=\"unit-id\">{{crac.id}}</div>\n            <div class=\"status-indicator\" ng-class=\"getStatusClass(crac)\">\n                <div class=\"status-icon\">{{getStatusIcon(crac)}}</div>\n                <div class=\"status-text\">{{crac.status | uppercase}}</div>\n            </div>\n        </div>\n        \n        <div class=\"card-body\">\n            <div class=\"role-section\">\n                <div class=\"role-badge\" ng-class=\"getRoleClass(crac)\">{{crac.role}}</div>\n                <div class=\"runtime-info\">\n                    <span>{{crac.runtime_h || '0'}}h</span>\n                    <span>{{crac.start_count || '0'}} starts</span>\n                </div>\n            </div>\n            \n            <div class=\"output-section\">\n                <div class=\"output-label\">Output</div>\n                <div class=\"output-bar\">\n                    <div class=\"output-fill\" ng-style=\"getOutputStyle(crac)\"></div>\n                    <div class=\"output-text\">{{crac.output_pct || '0'}}%</div>\n                </div>\n            </div>\n            \n            <div class=\"temperature-section\">\n                <div class=\"temp-reading\">\n                    <label>Supply Temp:</label>\n                    <span class=\"temp-value\">{{crac.supply_temp_f || '--'}}°F</span>\n                </div>\n                <div class=\"capacity-reading\">\n                    <label>Cooling:</label>\n                    <span class=\"capacity-value\">{{crac.cooling_kw || '0'}} kW</span>\n                </div>\n            </div>\n            \n            <div class=\"equipment-mimic\">\n                <svg viewBox=\"0 0 100 60\" class=\"mimic-svg\">\n                    <!-- Equipment Outline -->\n                    <rect x=\"10\" y=\"10\" width=\"80\" height=\"40\" rx=\"3\" class=\"equipment-outline\" ng-class=\"getEquipmentClass(crac)\"/>\n                    \n                    <!-- Fan Symbol -->\n                    <circle cx=\"50\" cy=\"30\" r=\"12\" class=\"fan-circle\" ng-class=\"getFanClass(crac)\"/>\n                    <g ng-show=\"crac.status === 'running'\" class=\"fan-blades\">\n                        <line x1=\"42\" y1=\"22\" x2=\"58\" y2=\"38\" class=\"fan-blade\"/>\n                        <line x1=\"58\" y1=\"22\" x2=\"42\" y2=\"38\" class=\"fan-blade\"/>\n                        <line x1=\"38\" y1=\"30\" x2=\"62\" y2=\"30\" class=\"fan-blade\"/>\n                        <line x1=\"50\" y1=\"18\" x2=\"50\" y2=\"42\" class=\"fan-blade\"/>\n                    </g>\n                    \n                    <!-- Airflow Arrows -->\n                    <g ng-show=\"crac.status === 'running'\" class=\"airflow\">\n                        <path d=\"M 70 25 L 85 25\" class=\"airflow-arrow\" marker-end=\"url(#arrow)\"/>\n                        <path d=\"M 70 35 L 85 35\" class=\"airflow-arrow\" marker-end=\"url(#arrow)\"/>\n                    </g>\n                    \n                    <!-- Arrow Marker -->\n                    <defs>\n                        <marker id=\"arrow\" markerWidth=\"6\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                            <polygon points=\"0 0, 6 2, 0 4\" fill=\"#007bff\"/>\n                        </marker>\n                    </defs>\n                </svg>\n            </div>\n        </div>\n        \n        <div class=\"card-footer\">\n            <div class=\"alarm-indicators\">\n                <div class=\"alarm-dot\" ng-class=\"{'active': hasAlarms(crac)}\"></div>\n                <span>{{getAlarmCount(crac)}} alarms</span>\n            </div>\n            <div class=\"efficiency-indicator\">\n                COP: {{getCOP(crac)}}\n            </div>\n        </div>\n    </div>\n</div>\n\n<style>\n.crac-equipment-cards {\n    display: flex;\n    gap: 15px;\n    padding: 10px;\n    flex-wrap: wrap;\n    justify-content: space-around;\n}\n\n.crac-card {\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    border: 2px solid #e9ecef;\n    width: 280px;\n    min-height: 320px;\n    transition: all 0.3s ease;\n}\n\n.crac-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(0,0,0,0.15);\n}\n\n.card-header {\n    padding: 12px 15px;\n    border-radius: 6px 6px 0 0;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.card-header.running {\n    background: linear-gradient(135deg, #28a745, #20c997);\n    color: white;\n}\n\n.card-header.starting {\n    background: linear-gradient(135deg, #ffc107, #fd7e14);\n    color: white;\n}\n\n.card-header.off {\n    background: linear-gradient(135deg, #6c757d, #495057);\n    color: white;\n}\n\n.card-header.failed {\n    background: linear-gradient(135deg, #dc3545, #c82333);\n    color: white;\n}\n\n.unit-id {\n    font-size: 18px;\n    font-weight: 700;\n}\n\n.status-indicator {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 2px;\n}\n\n.status-icon {\n    font-size: 16px;\n}\n\n.status-text {\n    font-size: 11px;\n    font-weight: 600;\n}\n\n.card-body {\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n}\n\n.role-section {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.role-badge {\n    padding: 4px 10px;\n    border-radius: 4px;\n    font-size: 11px;\n    font-weight: 700;\n    text-transform: uppercase;\n}\n\n.role-badge.lead {\n    background: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n}\n\n.role-badge.lag {\n    background: #fff3cd;\n    color: #856404;\n    border: 1px solid #ffeaa7;\n}\n\n.role-badge.standby {\n    background: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n}\n\n.runtime-info {\n    display: flex;\n    flex-direction: column;\n    font-size: 10px;\n    color: #6c757d;\n    text-align: right;\n}\n\n.output-section {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.output-label {\n    font-size: 12px;\n    font-weight: 600;\n    color: #495057;\n}\n\n.output-bar {\n    position: relative;\n    height: 24px;\n    background: #e9ecef;\n    border-radius: 12px;\n    overflow: hidden;\n}\n\n.output-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #004B87, #007bff);\n    border-radius: 12px;\n    transition: width 0.3s ease;\n    position: relative;\n}\n\n.output-text {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 11px;\n    font-weight: 700;\n    color: white;\n    text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\n}\n\n.temperature-section {\n    display: flex;\n    justify-content: space-between;\n    gap: 10px;\n}\n\n.temp-reading, .capacity-reading {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n}\n\n.temp-reading label, .capacity-reading label {\n    font-size: 10px;\n    color: #6c757d;\n    font-weight: 600;\n}\n\n.temp-value, .capacity-value {\n    font-size: 13px;\n    font-weight: 700;\n    color: #004B87;\n    font-family: 'Courier New', monospace;\n}\n\n.equipment-mimic {\n    height: 60px;\n    margin: 5px 0;\n}\n\n.mimic-svg {\n    width: 100%;\n    height: 100%;\n}\n\n.equipment-outline {\n    fill: #f8f9fa;\n    stroke: #dee2e6;\n    stroke-width: 2;\n}\n\n.equipment-outline.running {\n    fill: #d4edda;\n    stroke: #28a745;\n}\n\n.equipment-outline.failed {\n    fill: #f8d7da;\n    stroke: #dc3545;\n}\n\n.fan-circle {\n    fill: #e9ecef;\n    stroke: #6c757d;\n    stroke-width: 2;\n}\n\n.fan-circle.running {\n    fill: #cceef4;\n    stroke: #17a2b8;\n    animation: spin 2s linear infinite;\n}\n\n.fan-blade {\n    stroke: #495057;\n    stroke-width: 2;\n    stroke-linecap: round;\n}\n\n.airflow-arrow {\n    stroke: #007bff;\n    stroke-width: 2;\n    animation: flow 1.5s linear infinite;\n}\n\n.card-footer {\n    padding: 10px 15px;\n    border-top: 1px solid #e9ecef;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background: #f8f9fa;\n    border-radius: 0 0 6px 6px;\n}\n\n.alarm-indicators {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 10px;\n    color: #6c757d;\n}\n\n.alarm-dot {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background: #28a745;\n}\n\n.alarm-dot.active {\n    background: #dc3545;\n    animation: pulse 1s infinite;\n}\n\n.efficiency-indicator {\n    font-size: 10px;\n    color: #6c757d;\n    font-weight: 600;\n}\n\n@keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n\n@keyframes flow {\n    0% { stroke-dasharray: 0 10; }\n    100% { stroke-dasharray: 10 0; }\n}\n\n@keyframes pulse {\n    0% { opacity: 1; }\n    50% { opacity: 0.3; }\n    100% { opacity: 1; }\n}\n</style>\n\n<script>\n(function(scope) {\n    // Mock data for demonstration - in real implementation, this comes from MQTT\n    scope.cracUnits = [\n        {\n            id: 'CRAC-01',\n            role: 'LEAD',\n            status: 'running',\n            output_pct: 85,\n            supply_temp_f: 58.2,\n            cooling_kw: 28.5,\n            power_kw: 12.3,\n            runtime_h: 1247,\n            start_count: 23,\n            alarms: 0\n        },\n        {\n            id: 'CRAC-02',\n            role: 'LAG',\n            status: 'running',\n            output_pct: 62,\n            supply_temp_f: 59.1,\n            cooling_kw: 18.7,\n            power_kw: 8.9,\n            runtime_h: 892,\n            start_count: 41,\n            alarms: 0\n        },\n        {\n            id: 'CRAC-03',\n            role: 'STANDBY',\n            status: 'off',\n            output_pct: 0,\n            supply_temp_f: '--',\n            cooling_kw: 0,\n            power_kw: 0.5,\n            runtime_h: 156,\n            start_count: 8,\n            alarms: 0\n        }\n    ];\n    \n    scope.getHeaderClass = function(crac) {\n        return crac.status || 'off';\n    };\n    \n    scope.getStatusClass = function(crac) {\n        return 'status-' + (crac.status || 'off');\n    };\n    \n    scope.getStatusIcon = function(crac) {\n        const icons = {\n            'running': '🟢',\n            'starting': '🟡',\n            'off': '⚫',\n            'failed': '🔴'\n        };\n        return icons[crac.status] || '⚫';\n    };\n    \n    scope.getRoleClass = function(crac) {\n        return crac.role?.toLowerCase() || 'standby';\n    };\n    \n    scope.getOutputStyle = function(crac) {\n        return {\n            width: (crac.output_pct || 0) + '%'\n        };\n    };\n    \n    scope.getEquipmentClass = function(crac) {\n        return crac.status === 'running' ? 'running' : (crac.status === 'failed' ? 'failed' : '');\n    };\n    \n    scope.getFanClass = function(crac) {\n        return crac.status === 'running' ? 'running' : '';\n    };\n    \n    scope.hasAlarms = function(crac) {\n        return (crac.alarms || 0) > 0;\n    };\n    \n    scope.getAlarmCount = function(crac) {\n        return crac.alarms || 0;\n    };\n    \n    scope.getCOP = function(crac) {\n        if (!crac.cooling_kw || !crac.power_kw || crac.power_kw === 0) return '--';\n        return (crac.cooling_kw / crac.power_kw).toFixed(1);\n    };\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 140,
        "wires": [[]]
    },
    {
        "id": "alarm_management_panel",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "alarms_group",
        "name": "Professional Alarm Management",
        "order": 1,
        "width": "6",
        "height": "8",
        "format": "<div class=\"alarm-management-panel\">\n    <div class=\"alarm-header\">\n        <div class=\"alarm-title\">\n            <span class=\"alarm-icon\">🚨</span>\n            <span>Alarm Management</span>\n        </div>\n        <div class=\"alarm-counters\">\n            <div class=\"counter critical\">\n                <span class=\"count\">{{alarmCounts.critical || 0}}</span>\n                <span class=\"label\">Critical</span>\n            </div>\n            <div class=\"counter high\">\n                <span class=\"count\">{{alarmCounts.high || 0}}</span>\n                <span class=\"label\">High</span>\n            </div>\n            <div class=\"counter medium\">\n                <span class=\"count\">{{alarmCounts.medium || 0}}</span>\n                <span class=\"label\">Medium</span>\n            </div>\n            <div class=\"counter low\">\n                <span class=\"count\">{{alarmCounts.low || 0}}</span>\n                <span class=\"label\">Low</span>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"alarm-table\">\n        <div class=\"table-header\">\n            <div class=\"col-time\">Time</div>\n            <div class=\"col-priority\">Pri</div>\n            <div class=\"col-code\">Code</div>\n            <div class=\"col-asset\">Asset</div>\n            <div class=\"col-state\">State</div>\n        </div>\n        \n        <div class=\"table-body\">\n            <div class=\"alarm-row\" ng-repeat=\"alarm in activeAlarms | limitTo:8\" ng-class=\"getAlarmRowClass(alarm)\">\n                <div class=\"col-time\">{{formatTime(alarm.timestamp)}}</div>\n                <div class=\"col-priority\">\n                    <span class=\"priority-badge\" ng-class=\"getPriorityClass(alarm)\">{{alarm.priority[0].toUpperCase()}}</span>\n                </div>\n                <div class=\"col-code\">{{alarm.code}}</div>\n                <div class=\"col-asset\">{{alarm.asset}}</div>\n                <div class=\"col-state\">\n                    <span class=\"state-badge\" ng-class=\"getStateClass(alarm)\" ng-click=\"acknowledgeAlarm(alarm)\">{{alarm.state}}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"alarm-actions\">\n        <button class=\"action-btn ack-all\" ng-click=\"acknowledgeAll()\" ng-disabled=\"!hasActiveAlarms()\">\n            <span>🔇</span> ACK ALL\n        </button>\n        <button class=\"action-btn silence\" ng-click=\"silenceAll()\" ng-disabled=\"!hasActiveAlarms()\">\n            <span>🔕</span> SILENCE\n        </button>\n        <button class=\"action-btn export\" ng-click=\"exportAlarms()\">\n            <span>📊</span> EXPORT\n        </button>\n    </div>\n    \n    <div class=\"debounce-indicator\" ng-show=\"pendingAlarms > 0\">\n        <div class=\"debounce-text\">\n            <span class=\"debounce-icon\">⏱️</span>\n            {{pendingAlarms}} pending (debounce: {{debounceTime}}s)\n        </div>\n        <div class=\"debounce-bar\">\n            <div class=\"debounce-fill\" ng-style=\"getDebounceStyle()\"></div>\n        </div>\n    </div>\n</div>\n\n<style>\n.alarm-management-panel {\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    border: 2px solid #e9ecef;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.alarm-header {\n    background: linear-gradient(135deg, #dc3545, #c82333);\n    color: white;\n    padding: 12px 15px;\n    border-radius: 6px 6px 0 0;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.alarm-title {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-size: 16px;\n    font-weight: 700;\n}\n\n.alarm-icon {\n    font-size: 18px;\n}\n\n.alarm-counters {\n    display: flex;\n    justify-content: space-between;\n    gap: 5px;\n}\n\n.counter {\n    background: rgba(255,255,255,0.1);\n    border-radius: 4px;\n    padding: 4px 6px;\n    text-align: center;\n    flex: 1;\n    min-width: 45px;\n}\n\n.counter .count {\n    display: block;\n    font-size: 16px;\n    font-weight: 700;\n    line-height: 1;\n}\n\n.counter .label {\n    display: block;\n    font-size: 9px;\n    opacity: 0.8;\n    text-transform: uppercase;\n}\n\n.counter.critical { border-left: 3px solid #fff; }\n.counter.high { border-left: 3px solid #fd7e14; }\n.counter.medium { border-left: 3px solid #ffc107; }\n.counter.low { border-left: 3px solid #28a745; }\n\n.alarm-table {\n    flex: 1;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n}\n\n.table-header {\n    display: flex;\n    background: #f8f9fa;\n    border-bottom: 1px solid #dee2e6;\n    padding: 8px 5px;\n    font-size: 10px;\n    font-weight: 600;\n    color: #495057;\n    text-transform: uppercase;\n}\n\n.table-body {\n    flex: 1;\n    overflow-y: auto;\n    max-height: 200px;\n}\n\n.alarm-row {\n    display: flex;\n    padding: 6px 5px;\n    border-bottom: 1px solid #f1f3f4;\n    font-size: 10px;\n    transition: background 0.2s;\n}\n\n.alarm-row:hover {\n    background: #f8f9fa;\n}\n\n.alarm-row.critical {\n    border-left: 3px solid #dc3545;\n    background: rgba(220,53,69,0.05);\n}\n\n.alarm-row.high {\n    border-left: 3px solid #fd7e14;\n    background: rgba(253,126,20,0.05);\n}\n\n.alarm-row.medium {\n    border-left: 3px solid #ffc107;\n    background: rgba(255,193,7,0.05);\n}\n\n.alarm-row.low {\n    border-left: 3px solid #28a745;\n    background: rgba(40,167,69,0.05);\n}\n\n.col-time { flex: 0 0 45px; font-family: monospace; }\n.col-priority { flex: 0 0 25px; text-align: center; }\n.col-code { flex: 0 0 35px; font-weight: 600; }\n.col-asset { flex: 1; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }\n.col-state { flex: 0 0 35px; text-align: center; }\n\n.priority-badge {\n    display: inline-block;\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    text-align: center;\n    line-height: 18px;\n    font-size: 8px;\n    font-weight: 700;\n    color: white;\n}\n\n.priority-badge.critical { background: #dc3545; }\n.priority-badge.high { background: #fd7e14; }\n.priority-badge.medium { background: #ffc107; color: #212529; }\n.priority-badge.low { background: #28a745; }\n\n.state-badge {\n    padding: 2px 4px;\n    border-radius: 2px;\n    font-size: 8px;\n    font-weight: 600;\n    cursor: pointer;\n    text-transform: uppercase;\n}\n\n.state-badge.active {\n    background: #dc3545;\n    color: white;\n}\n\n.state-badge.acknowledged {\n    background: #ffc107;\n    color: #212529;\n}\n\n.state-badge.cleared {\n    background: #28a745;\n    color: white;\n}\n\n.alarm-actions {\n    padding: 10px;\n    border-top: 1px solid #dee2e6;\n    background: #f8f9fa;\n    display: flex;\n    gap: 5px;\n    border-radius: 0 0 6px 6px;\n}\n\n.action-btn {\n    flex: 1;\n    padding: 6px 4px;\n    border: none;\n    border-radius: 4px;\n    font-size: 9px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 2px;\n}\n\n.action-btn span {\n    font-size: 12px;\n}\n\n.action-btn.ack-all {\n    background: #ffc107;\n    color: #212529;\n}\n\n.action-btn.ack-all:hover {\n    background: #e0a800;\n}\n\n.action-btn.silence {\n    background: #6c757d;\n    color: white;\n}\n\n.action-btn.silence:hover {\n    background: #5a6268;\n}\n\n.action-btn.export {\n    background: #007bff;\n    color: white;\n}\n\n.action-btn.export:hover {\n    background: #0056b3;\n}\n\n.action-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n.debounce-indicator {\n    padding: 8px 10px;\n    background: #fff3cd;\n    border-top: 1px solid #ffeaa7;\n    border-radius: 0 0 6px 6px;\n}\n\n.debounce-text {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    font-size: 10px;\n    color: #856404;\n    margin-bottom: 4px;\n}\n\n.debounce-icon {\n    font-size: 12px;\n}\n\n.debounce-bar {\n    height: 3px;\n    background: #f8d7da;\n    border-radius: 2px;\n    overflow: hidden;\n}\n\n.debounce-fill {\n    height: 100%;\n    background: #dc3545;\n    transition: width 0.1s linear;\n}\n</style>\n\n<script>\n(function(scope) {\n    // Mock alarm data for demonstration\n    scope.activeAlarms = [\n        {\n            timestamp: new Date(Date.now() - 120000),\n            priority: 'high',\n            code: 'H-001',\n            asset: 'CRAC-01',\n            state: 'active',\n            description: 'High discharge pressure'\n        },\n        {\n            timestamp: new Date(Date.now() - 45000),\n            priority: 'medium',\n            code: 'M-021',\n            asset: 'CRAC-02',\n            state: 'acknowledged',\n            description: 'Filter differential high'\n        },\n        {\n            timestamp: new Date(Date.now() - 30000),\n            priority: 'low',\n            code: 'L-105',\n            asset: 'ROOM-01',\n            state: 'active',\n            description: 'Temperature deviation'\n        }\n    ];\n    \n    scope.alarmCounts = {\n        critical: 0,\n        high: 1,\n        medium: 1,\n        low: 1\n    };\n    \n    scope.pendingAlarms = 2;\n    scope.debounceTime = 30;\n    scope.debounceProgress = 45; // 0-100%\n    \n    scope.formatTime = function(timestamp) {\n        return new Date(timestamp).toLocaleTimeString('en-US', {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    };\n    \n    scope.getAlarmRowClass = function(alarm) {\n        return alarm.priority;\n    };\n    \n    scope.getPriorityClass = function(alarm) {\n        return alarm.priority;\n    };\n    \n    scope.getStateClass = function(alarm) {\n        return alarm.state;\n    };\n    \n    scope.acknowledgeAlarm = function(alarm) {\n        if (alarm.state === 'active') {\n            alarm.state = 'acknowledged';\n        }\n    };\n    \n    scope.acknowledgeAll = function() {\n        scope.activeAlarms.forEach(function(alarm) {\n            if (alarm.state === 'active') {\n                alarm.state = 'acknowledged';\n            }\n        });\n    };\n    \n    scope.silenceAll = function() {\n        // Silence all active alarms\n        console.log('Silencing all alarms');\n    };\n    \n    scope.exportAlarms = function() {\n        // Export alarm history to CSV\n        console.log('Exporting alarm data');\n    };\n    \n    scope.hasActiveAlarms = function() {\n        return scope.activeAlarms.some(function(alarm) {\n            return alarm.state === 'active';\n        });\n    };\n    \n    scope.getDebounceStyle = function() {\n        return {\n            width: scope.debounceProgress + '%'\n        };\n    };\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 140,
        "wires": [[]]
    },
    {
        "id": "technical_charts",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "charts_group",
        "name": "Professional Technical Charts",
        "order": 1,
        "width": "24",
        "height": "8",
        "format": "<div class=\"technical-charts-container\">\n    <div class=\"chart-grid\">\n        <!-- Temperature Trend Chart -->\n        <div class=\"chart-panel\">\n            <div class=\"chart-header\">\n                <div class=\"chart-title\">Temperature Trend (Last 15 Minutes)</div>\n                <div class=\"chart-legend\">\n                    <span class=\"legend-item room-temp\">Room Temp</span>\n                    <span class=\"legend-item setpoint\">Setpoint</span>\n                    <span class=\"legend-item deadband\">±Deadband</span>\n                </div>\n            </div>\n            <div class=\"chart-content\">\n                <canvas id=\"tempChart\" width=\"400\" height=\"200\"></canvas>\n            </div>\n        </div>\n        \n        <!-- Controller Output Chart -->\n        <div class=\"chart-panel\">\n            <div class=\"chart-header\">\n                <div class=\"chart-title\">Controller Output & Clamps</div>\n                <div class=\"chart-legend\">\n                    <span class=\"legend-item output\">Output %</span>\n                    <span class=\"legend-item clamp-high\">High Clamp</span>\n                    <span class=\"legend-item clamp-low\">Low Clamp</span>\n                    <span class=\"legend-item saturation\">Saturation</span>\n                </div>\n            </div>\n            <div class=\"chart-content\">\n                <canvas id=\"outputChart\" width=\"400\" height=\"200\"></canvas>\n            </div>\n        </div>\n        \n        <!-- P/I/D Terms Chart -->\n        <div class=\"chart-panel\">\n            <div class=\"chart-header\">\n                <div class=\"chart-title\">P/I/D Terms Analysis</div>\n                <div class=\"chart-legend\">\n                    <span class=\"legend-item p-term\">Proportional</span>\n                    <span class=\"legend-item i-term\">Integral</span>\n                    <span class=\"legend-item d-term\">Derivative</span>\n                    <span class=\"legend-item total\">Total Output</span>\n                </div>\n            </div>\n            <div class=\"chart-content\">\n                <canvas id=\"pidChart\" width=\"400\" height=\"200\"></canvas>\n            </div>\n        </div>\n    </div>\n    \n    <!-- Chart Controls -->\n    <div class=\"chart-controls\">\n        <div class=\"control-group\">\n            <label>Time Range:</label>\n            <select ng-model=\"timeRange\" ng-change=\"updateCharts()\">\n                <option value=\"15\">15 Minutes</option>\n                <option value=\"30\">30 Minutes</option>\n                <option value=\"60\">1 Hour</option>\n                <option value=\"240\">4 Hours</option>\n            </select>\n        </div>\n        \n        <div class=\"control-group\">\n            <label>Update Rate:</label>\n            <select ng-model=\"updateRate\">\n                <option value=\"1\">1 Second</option>\n                <option value=\"5\">5 Seconds</option>\n                <option value=\"10\">10 Seconds</option>\n                <option value=\"30\">30 Seconds</option>\n            </select>\n        </div>\n        \n        <div class=\"control-group\">\n            <button class=\"export-btn\" ng-click=\"exportChartData()\">\n                <span>📊</span> Export Data\n            </button>\n            <button class=\"freeze-btn\" ng-click=\"toggleFreeze()\" ng-class=\"{'active': frozen}\">\n                <span>{{frozen ? '▶️' : '⏸️'}}</span> {{frozen ? 'Resume' : 'Freeze'}}\n            </button>\n        </div>\n    </div>\n</div>\n\n<style>\n.technical-charts-container {\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    border: 2px solid #e9ecef;\n    padding: 15px;\n}\n\n.chart-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 15px;\n    margin-bottom: 15px;\n}\n\n.chart-panel {\n    background: #f8f9fa;\n    border: 1px solid #dee2e6;\n    border-radius: 6px;\n    overflow: hidden;\n}\n\n.chart-header {\n    background: linear-gradient(135deg, #004B87, #0056A3);\n    color: white;\n    padding: 10px 12px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 8px;\n}\n\n.chart-title {\n    font-size: 14px;\n    font-weight: 700;\n}\n\n.chart-legend {\n    display: flex;\n    gap: 8px;\n    flex-wrap: wrap;\n}\n\n.legend-item {\n    font-size: 10px;\n    padding: 2px 6px;\n    border-radius: 3px;\n    background: rgba(255,255,255,0.1);\n    border-left: 3px solid;\n    font-weight: 600;\n}\n\n.legend-item.room-temp { border-left-color: #dc3545; }\n.legend-item.setpoint { border-left-color: #28a745; }\n.legend-item.deadband { border-left-color: #ffc107; }\n.legend-item.output { border-left-color: #007bff; }\n.legend-item.clamp-high { border-left-color: #fd7e14; }\n.legend-item.clamp-low { border-left-color: #6f42c1; }\n.legend-item.saturation { border-left-color: #e83e8c; }\n.legend-item.p-term { border-left-color: #20c997; }\n.legend-item.i-term { border-left-color: #fd7e14; }\n.legend-item.d-term { border-left-color: #6f42c1; }\n.legend-item.total { border-left-color: #495057; }\n\n.chart-content {\n    padding: 15px;\n    height: 220px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n}\n\n.chart-content canvas {\n    max-width: 100%;\n    max-height: 100%;\n    border: 1px solid #dee2e6;\n    border-radius: 4px;\n    background: white;\n}\n\n.chart-controls {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n    padding: 12px;\n    background: #f8f9fa;\n    border-radius: 6px;\n    border: 1px solid #dee2e6;\n    flex-wrap: wrap;\n}\n\n.control-group {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.control-group label {\n    font-size: 12px;\n    font-weight: 600;\n    color: #495057;\n    min-width: 80px;\n}\n\n.control-group select {\n    padding: 4px 8px;\n    border: 1px solid #ced4da;\n    border-radius: 4px;\n    font-size: 11px;\n    background: white;\n}\n\n.export-btn, .freeze-btn {\n    padding: 6px 12px;\n    border: none;\n    border-radius: 4px;\n    font-size: 11px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n    display: flex;\n    align-items: center;\n    gap: 4px;\n}\n\n.export-btn {\n    background: #28a745;\n    color: white;\n}\n\n.export-btn:hover {\n    background: #218838;\n}\n\n.freeze-btn {\n    background: #6c757d;\n    color: white;\n}\n\n.freeze-btn:hover {\n    background: #5a6268;\n}\n\n.freeze-btn.active {\n    background: #ffc107;\n    color: #212529;\n}\n\n@media (max-width: 1400px) {\n    .chart-grid {\n        grid-template-columns: 1fr 1fr;\n    }\n    \n    .chart-panel:last-child {\n        grid-column: 1 / -1;\n    }\n}\n\n@media (max-width: 900px) {\n    .chart-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .chart-controls {\n        flex-direction: column;\n        align-items: stretch;\n        gap: 10px;\n    }\n    \n    .control-group {\n        justify-content: space-between;\n    }\n}\n\n/* Mock Chart Styling */\n.chart-content::before {\n    content: 'Real-time chart will display here\\ACANVAS element with professional trend lines\\AShowing last ' attr(data-timerange) ' minutes of data';\n    white-space: pre-line;\n    text-align: center;\n    color: #6c757d;\n    font-size: 12px;\n    line-height: 1.4;\n    font-style: italic;\n}\n\n.chart-content[data-chart=\"temp\"]::before {\n    content: 'Temperature Trend Chart\\A📈 Room: 72.1°F  Setpoint: 72.0°F\\A±1°F deadband shown as yellow zone\\ALast updated: ' attr(data-time);\n}\n\n.chart-content[data-chart=\"output\"]::before {\n    content: 'Controller Output Chart\\A📊 Current: 67%  Clamps: 0-100%\\ASaturation indicators at limits\\AOutput rate: 2%/min max';\n}\n\n.chart-content[data-chart=\"pid\"]::before {\n    content: 'P/I/D Terms Analysis\\A🔧 P: +45%  I: +22%  D: -0.5%\\ATotal: 67% (P+I+D)\\ATuning: Kp=2.5, Ki=0.1, Kd=0.05';\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.timeRange = '15';\n    scope.updateRate = '5';\n    scope.frozen = false;\n    \n    scope.updateCharts = function() {\n        console.log('Updating charts with time range:', scope.timeRange);\n        // In real implementation, this would update the chart data\n    };\n    \n    scope.exportChartData = function() {\n        console.log('Exporting chart data as CSV');\n        // In real implementation, this would export trend data\n    };\n    \n    scope.toggleFreeze = function() {\n        scope.frozen = !scope.frozen;\n        console.log('Chart updates:', scope.frozen ? 'FROZEN' : 'ACTIVE');\n    };\n    \n    // Mock chart initialization\n    scope.$on('$viewContentLoaded', function() {\n        // Set chart attributes for mock display\n        const charts = document.querySelectorAll('.chart-content');\n        charts[0]?.setAttribute('data-chart', 'temp');\n        charts[1]?.setAttribute('data-chart', 'output');\n        charts[2]?.setAttribute('data-chart', 'pid');\n        \n        // Update time display\n        const now = new Date().toLocaleTimeString();\n        charts.forEach(chart => {\n            chart.setAttribute('data-time', now);\n            chart.setAttribute('data-timerange', scope.timeRange);\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 240,
        "wires": [[]]
    },
    {
        "id": "system_controls_panel",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "controls_group",
        "name": "Interactive System Controls",
        "order": 1,
        "width": "12",
        "height": "6",
        "format": "<div class=\"system-controls-panel\">\n    <div class=\"controls-grid\">\n        <!-- Scenario Control -->\n        <div class=\"control-section\">\n            <div class=\"section-header\">\n                <span class=\"section-icon\">🎯</span>\n                <span class=\"section-title\">Scenario Control</span>\n            </div>\n            <div class=\"control-content\">\n                <div class=\"control-item\">\n                    <label>Active Scenario:</label>\n                    <select ng-model=\"selectedScenario\" ng-change=\"changeScenario()\" class=\"scenario-select\">\n                        <option value=\"baseline\">Baseline Operation</option>\n                        <option value=\"rising-load\">Rising Load Test</option>\n                        <option value=\"crac-failure\">CRAC Failure Simulation</option>\n                        <option value=\"sensor-drift\">Sensor Drift Test</option>\n                        <option value=\"thermal-challenge\">Thermal Challenge</option>\n                    </select>\n                </div>\n                <div class=\"simulation-controls\">\n                    <button class=\"sim-btn play\" ng-click=\"playSimulation()\" ng-class=\"{'active': isPlaying}\">\n                        <span>{{isPlaying ? '⏸️' : '▶️'}}</span>\n                        {{isPlaying ? 'Pause' : 'Play'}}\n                    </button>\n                    <button class=\"sim-btn reset\" ng-click=\"resetSimulation()\">\n                        <span>🔄</span> Reset\n                    </button>\n                    <button class=\"sim-btn speed\" ng-click=\"toggleSpeed()\">\n                        <span>⚡</span> {{speedFactor}}×\n                    </button>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Setpoint Control -->\n        <div class=\"control-section\">\n            <div class=\"section-header\">\n                <span class=\"section-icon\">🌡️</span>\n                <span class=\"section-title\">Setpoint Adjustment</span>\n            </div>\n            <div class=\"control-content\">\n                <div class=\"setpoint-control\">\n                    <div class=\"setpoint-display\">\n                        <span class=\"current-sp\">{{setpoint_f || 72}}°F</span>\n                        <span class=\"sp-range\">(68-78°F)</span>\n                    </div>\n                    <div class=\"setpoint-slider\">\n                        <input type=\"range\" min=\"68\" max=\"78\" step=\"0.5\" ng-model=\"setpoint_f\" ng-change=\"updateSetpoint()\" class=\"slider\">\n                        <div class=\"slider-labels\">\n                            <span>68°F</span>\n                            <span>73°F</span>\n                            <span>78°F</span>\n                        </div>\n                    </div>\n                    <div class=\"setpoint-presets\">\n                        <button class=\"preset-btn\" ng-click=\"setPreset(70)\">70°F</button>\n                        <button class=\"preset-btn\" ng-click=\"setPreset(72)\">72°F</button>\n                        <button class=\"preset-btn\" ng-click=\"setPreset(75)\">75°F</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Fault Injection -->\n        <div class=\"control-section\">\n            <div class=\"section-header\">\n                <span class=\"section-icon\">⚠️</span>\n                <span class=\"section-title\">Fault Injection</span>\n            </div>\n            <div class=\"control-content\">\n                <div class=\"fault-toggles\">\n                    <div class=\"fault-toggle\">\n                        <input type=\"checkbox\" id=\"crac3-fail\" ng-model=\"faults.crac3_fail\" ng-change=\"toggleFault('crac3_fail')\">\n                        <label for=\"crac3-fail\">CRAC-03 Fan Failure</label>\n                    </div>\n                    <div class=\"fault-toggle\">\n                        <input type=\"checkbox\" id=\"sensor-drift\" ng-model=\"faults.sensor_drift\" ng-change=\"toggleFault('sensor_drift')\">\n                        <label for=\"sensor-drift\">Temperature Sensor Drift</label>\n                    </div>\n                    <div class=\"fault-toggle\">\n                        <input type=\"checkbox\" id=\"valve-stick\" ng-model=\"faults.valve_stiction\" ng-change=\"toggleFault('valve_stiction')\">\n                        <label for=\"valve-stick\">Valve Stiction</label>\n                    </div>\n                    <div class=\"fault-toggle\">\n                        <input type=\"checkbox\" id=\"comm-loss\" ng-model=\"faults.comm_loss\" ng-change=\"toggleFault('comm_loss')\">\n                        <label for=\"comm-loss\">Communication Loss</label>\n                    </div>\n                </div>\n                <button class=\"clear-faults-btn\" ng-click=\"clearAllFaults()\">\n                    <span>🔧</span> Clear All Faults\n                </button>\n            </div>\n        </div>\n        \n        <!-- Data Export -->\n        <div class=\"control-section\">\n            <div class=\"section-header\">\n                <span class=\"section-icon\">📊</span>\n                <span class=\"section-title\">Data Export</span>\n            </div>\n            <div class=\"control-content\">\n                <div class=\"export-options\">\n                    <button class=\"export-btn csv\" ng-click=\"exportCSV()\">\n                        <span>📄</span> Export CSV\n                    </button>\n                    <button class=\"export-btn report\" ng-click=\"generateReport()\">\n                        <span>📋</span> Generate Report\n                    </button>\n                    <button class=\"export-btn config\" ng-click=\"exportConfig()\">\n                        <span>⚙️</span> Export Config\n                    </button>\n                </div>\n                <div class=\"export-status\">\n                    Last export: {{lastExport || 'Never'}}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<style>\n.system-controls-panel {\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    border: 2px solid #e9ecef;\n    padding: 15px;\n}\n\n.controls-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 15px;\n}\n\n.control-section {\n    background: #f8f9fa;\n    border: 1px solid #dee2e6;\n    border-radius: 6px;\n    overflow: hidden;\n}\n\n.section-header {\n    background: linear-gradient(135deg, #004B87, #0056A3);\n    color: white;\n    padding: 10px 12px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.section-icon {\n    font-size: 16px;\n}\n\n.section-title {\n    font-size: 14px;\n    font-weight: 700;\n}\n\n.control-content {\n    padding: 12px;\n}\n\n.control-item {\n    margin-bottom: 10px;\n}\n\n.control-item label {\n    display: block;\n    font-size: 11px;\n    font-weight: 600;\n    color: #495057;\n    margin-bottom: 4px;\n}\n\n.scenario-select {\n    width: 100%;\n    padding: 6px 8px;\n    border: 1px solid #ced4da;\n    border-radius: 4px;\n    font-size: 12px;\n    background: white;\n}\n\n.simulation-controls {\n    display: flex;\n    gap: 6px;\n    margin-top: 8px;\n}\n\n.sim-btn {\n    flex: 1;\n    padding: 6px 8px;\n    border: none;\n    border-radius: 4px;\n    font-size: 10px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 2px;\n}\n\n.sim-btn.play {\n    background: #28a745;\n    color: white;\n}\n\n.sim-btn.play.active {\n    background: #ffc107;\n    color: #212529;\n}\n\n.sim-btn.reset {\n    background: #6c757d;\n    color: white;\n}\n\n.sim-btn.speed {\n    background: #007bff;\n    color: white;\n}\n\n.sim-btn:hover {\n    transform: translateY(-1px);\n    opacity: 0.9;\n}\n\n.setpoint-control {\n    text-align: center;\n}\n\n.setpoint-display {\n    margin-bottom: 8px;\n}\n\n.current-sp {\n    font-size: 20px;\n    font-weight: 700;\n    color: #004B87;\n    font-family: 'Courier New', monospace;\n}\n\n.sp-range {\n    font-size: 10px;\n    color: #6c757d;\n    margin-left: 5px;\n}\n\n.setpoint-slider {\n    margin: 10px 0;\n}\n\n.slider {\n    width: 100%;\n    height: 6px;\n    border-radius: 3px;\n    background: #dee2e6;\n    outline: none;\n    opacity: 0.7;\n    transition: opacity 0.2s;\n}\n\n.slider:hover {\n    opacity: 1;\n}\n\n.slider::-webkit-slider-thumb {\n    appearance: none;\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background: #004B87;\n    cursor: pointer;\n}\n\n.slider::-moz-range-thumb {\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background: #004B87;\n    cursor: pointer;\n    border: none;\n}\n\n.slider-labels {\n    display: flex;\n    justify-content: space-between;\n    font-size: 9px;\n    color: #6c757d;\n    margin-top: 4px;\n}\n\n.setpoint-presets {\n    display: flex;\n    gap: 4px;\n    margin-top: 8px;\n}\n\n.preset-btn {\n    flex: 1;\n    padding: 4px 6px;\n    border: 1px solid #ced4da;\n    border-radius: 3px;\n    background: white;\n    font-size: 10px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n}\n\n.preset-btn:hover {\n    background: #004B87;\n    color: white;\n    border-color: #004B87;\n}\n\n.fault-toggles {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n    margin-bottom: 10px;\n}\n\n.fault-toggle {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n}\n\n.fault-toggle input[type=\"checkbox\"] {\n    width: 14px;\n    height: 14px;\n    accent-color: #dc3545;\n}\n\n.fault-toggle label {\n    font-size: 11px;\n    color: #495057;\n    cursor: pointer;\n    margin: 0;\n}\n\n.clear-faults-btn {\n    width: 100%;\n    padding: 6px;\n    border: none;\n    border-radius: 4px;\n    background: #28a745;\n    color: white;\n    font-size: 10px;\n    font-weight: 600;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 4px;\n}\n\n.clear-faults-btn:hover {\n    background: #218838;\n}\n\n.export-options {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n    margin-bottom: 8px;\n}\n\n.export-btn {\n    padding: 6px 8px;\n    border: none;\n    border-radius: 4px;\n    font-size: 10px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 4px;\n}\n\n.export-btn.csv {\n    background: #28a745;\n    color: white;\n}\n\n.export-btn.report {\n    background: #007bff;\n    color: white;\n}\n\n.export-btn.config {\n    background: #6c757d;\n    color: white;\n}\n\n.export-btn:hover {\n    opacity: 0.9;\n    transform: translateY(-1px);\n}\n\n.export-status {\n    font-size: 9px;\n    color: #6c757d;\n    text-align: center;\n    font-style: italic;\n}\n\n@media (max-width: 900px) {\n    .controls-grid {\n        grid-template-columns: 1fr;\n    }\n}\n</style>\n\n<script>\n(function(scope) {\n    // Initial state\n    scope.selectedScenario = 'baseline';\n    scope.isPlaying = true;\n    scope.speedFactor = '1.0';\n    scope.setpoint_f = 72;\n    scope.faults = {\n        crac3_fail: false,\n        sensor_drift: false,\n        valve_stiction: false,\n        comm_loss: false\n    };\n    scope.lastExport = null;\n    \n    scope.changeScenario = function() {\n        console.log('Changing scenario to:', scope.selectedScenario);\n        scope.send({\n            topic: 'datacenter/commands/scenario',\n            payload: {\n                command: 'change_scenario',\n                scenario: scope.selectedScenario,\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.playSimulation = function() {\n        scope.isPlaying = !scope.isPlaying;\n        scope.send({\n            topic: 'datacenter/commands/simulation',\n            payload: {\n                command: scope.isPlaying ? 'play' : 'pause',\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.resetSimulation = function() {\n        scope.send({\n            topic: 'datacenter/commands/simulation',\n            payload: {\n                command: 'reset',\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.toggleSpeed = function() {\n        const speeds = ['0.25', '0.5', '1.0', '2.0', '4.0'];\n        const currentIndex = speeds.indexOf(scope.speedFactor);\n        scope.speedFactor = speeds[(currentIndex + 1) % speeds.length];\n        \n        scope.send({\n            topic: 'datacenter/commands/simulation',\n            payload: {\n                command: 'set_speed',\n                factor: parseFloat(scope.speedFactor),\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.updateSetpoint = function() {\n        scope.send({\n            topic: 'datacenter/commands/setpoint',\n            payload: {\n                command: 'set_setpoint',\n                setpoint_f: scope.setpoint_f,\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.setPreset = function(temp) {\n        scope.setpoint_f = temp;\n        scope.updateSetpoint();\n    };\n    \n    scope.toggleFault = function(faultType) {\n        scope.send({\n            topic: 'datacenter/commands/fault',\n            payload: {\n                command: scope.faults[faultType] ? 'inject_fault' : 'clear_fault',\n                fault_type: faultType,\n                enabled: scope.faults[faultType],\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.clearAllFaults = function() {\n        Object.keys(scope.faults).forEach(function(key) {\n            scope.faults[key] = false;\n        });\n        \n        scope.send({\n            topic: 'datacenter/commands/fault',\n            payload: {\n                command: 'clear_all_faults',\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.exportCSV = function() {\n        scope.lastExport = new Date().toLocaleTimeString();\n        scope.send({\n            topic: 'datacenter/commands/export',\n            payload: {\n                command: 'export_csv',\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.generateReport = function() {\n        scope.send({\n            topic: 'datacenter/commands/export',\n            payload: {\n                command: 'generate_report',\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n    \n    scope.exportConfig = function() {\n        scope.send({\n            topic: 'datacenter/commands/export',\n            payload: {\n                command: 'export_config',\n                timestamp: new Date().toISOString()\n            }\n        });\n    };\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 340,
        "wires": [["command_output"]]
    },
    {
        "id": "kpi_performance_strip",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "kpi_group",
        "name": "Engineering KPI Dashboard",
        "order": 1,
        "width": "12",
        "height": "6",
        "format": "<div class=\"kpi-performance-strip\">\n    <div class=\"kpi-header\">\n        <div class=\"kpi-title\">\n            <span class=\"kpi-icon\">📊</span>\n            <span>Key Performance Indicators</span>\n        </div>\n        <div class=\"kpi-timestamp\">\n            Last Updated: {{lastUpdate || 'Never'}}\n        </div>\n    </div>\n    \n    <div class=\"kpi-grid\">\n        <!-- Temperature Control Performance -->\n        <div class=\"kpi-card temperature\">\n            <div class=\"kpi-card-header\">\n                <span class=\"card-icon\">🌡️</span>\n                <span class=\"card-title\">Temperature Control</span>\n            </div>\n            <div class=\"kpi-metrics\">\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('mae', kpis.mae_f)\">{{kpis.mae_f || '0.0'}}°F</div>\n                    <div class=\"metric-label\">Mean Absolute Error</div>\n                    <div class=\"metric-target\">Target: &lt;1.0°F</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('overshoot', kpis.overshoot_f)\">{{kpis.overshoot_f || '0.0'}}°F</div>\n                    <div class=\"metric-label\">Max Overshoot</div>\n                    <div class=\"metric-target\">Target: &lt;2.0°F</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('in_band', kpis.in_band_pct)\">{{kpis.in_band_pct || '0'}}%</div>\n                    <div class=\"metric-label\">Time in Band</div>\n                    <div class=\"metric-target\">Target: &gt;95%</div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Controller Performance -->\n        <div class=\"kpi-card controller\">\n            <div class=\"kpi-card-header\">\n                <span class=\"card-icon\">🎛️</span>\n                <span class=\"card-title\">Controller Performance</span>\n            </div>\n            <div class=\"kpi-metrics\">\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('saturation', kpis.saturation_pct)\">{{kpis.saturation_pct || '0'}}%</div>\n                    <div class=\"metric-label\">Saturation Time</div>\n                    <div class=\"metric-target\">Target: &lt;5%</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('stability', kpis.stability_index)\">{{kpis.stability_index || '0.0'}}</div>\n                    <div class=\"metric-label\">Stability Index</div>\n                    <div class=\"metric-target\">Target: &gt;0.9</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('response', kpis.response_time)\">{{kpis.response_time || '0'}}s</div>\n                    <div class=\"metric-label\">Response Time</div>\n                    <div class=\"metric-target\">Target: &lt;300s</div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Equipment Performance -->\n        <div class=\"kpi-card equipment\">\n            <div class=\"kpi-card-header\">\n                <span class=\"card-icon\">⚙️</span>\n                <span class=\"card-title\">Equipment Performance</span>\n            </div>\n            <div class=\"kpi-metrics\">\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('balance', kpis.runtime_balance)\">{{kpis.runtime_balance || '0'}}%</div>\n                    <div class=\"metric-label\">Lead Balance</div>\n                    <div class=\"metric-target\">Target: 40-60%</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('efficiency', kpis.system_cop)\">{{kpis.system_cop || '0.0'}}</div>\n                    <div class=\"metric-label\">System COP</div>\n                    <div class=\"metric-target\">Target: &gt;2.5</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('cycling', kpis.cycle_count)\">{{kpis.cycle_count || '0'}}</div>\n                    <div class=\"metric-label\">Cycle Count</div>\n                    <div class=\"metric-target\">Target: &lt;6/hr</div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Energy Performance -->\n        <div class=\"kpi-card energy\">\n            <div class=\"kpi-card-header\">\n                <span class=\"card-icon\">⚡</span>\n                <span class=\"card-title\">Energy Performance</span>\n            </div>\n            <div class=\"kpi-metrics\">\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('pue', kpis.pue)\">{{kpis.pue || '0.0'}}</div>\n                    <div class=\"metric-label\">PUE</div>\n                    <div class=\"metric-target\">Target: &lt;1.4</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('utilization', kpis.utilization_pct)\">{{kpis.utilization_pct || '0'}}%</div>\n                    <div class=\"metric-label\">Utilization</div>\n                    <div class=\"metric-target\">Target: 60-80%</div>\n                </div>\n                <div class=\"metric\">\n                    <div class=\"metric-value\" ng-class=\"getKPIClass('demand', kpis.peak_demand)\">{{kpis.peak_demand || '0'}} kW</div>\n                    <div class=\"metric-label\">Peak Demand</div>\n                    <div class=\"metric-target\">Budget: 150kW</div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"kpi-summary\">\n        <div class=\"overall-score\">\n            <div class=\"score-circle\" ng-class=\"getOverallScoreClass()\">\n                <span class=\"score-value\">{{getOverallScore()}}</span>\n                <span class=\"score-label\">Overall Score</span>\n            </div>\n        </div>\n        \n        <div class=\"performance-indicators\">\n            <div class=\"indicator\" ng-class=\"getIndicatorClass('temperature')\">\n                <span class=\"indicator-icon\">🌡️</span>\n                <span class=\"indicator-text\">Temperature</span>\n                <span class=\"indicator-status\">{{getIndicatorStatus('temperature')}}</span>\n            </div>\n            <div class=\"indicator\" ng-class=\"getIndicatorClass('control')\">\n                <span class=\"indicator-icon\">🎛️</span>\n                <span class=\"indicator-text\">Control</span>\n                <span class=\"indicator-status\">{{getIndicatorStatus('control')}}</span>\n            </div>\n            <div class=\"indicator\" ng-class=\"getIndicatorClass('equipment')\">\n                <span class=\"indicator-icon\">⚙️</span>\n                <span class=\"indicator-text\">Equipment</span>\n                <span class=\"indicator-status\">{{getIndicatorStatus('equipment')}}</span>\n            </div>\n            <div class=\"indicator\" ng-class=\"getIndicatorClass('energy')\">\n                <span class=\"indicator-icon\">⚡</span>\n                <span class=\"indicator-text\">Energy</span>\n                <span class=\"indicator-status\">{{getIndicatorStatus('energy')}}</span>\n            </div>\n        </div>\n        \n        <div class=\"commissioning-status\">\n            <div class=\"commissioning-header\">Commissioning Status</div>\n            <div class=\"commissioning-progress\">\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" ng-style=\"getCommissioningProgress()\"></div>\n                </div>\n                <div class=\"progress-text\">{{commissioningPct || 0}}% Complete</div>\n            </div>\n            <div class=\"commissioning-tests\">\n                <span class=\"test-item\" ng-class=\"{'passed': tests.baseline}\">✓ Baseline</span>\n                <span class=\"test-item\" ng-class=\"{'passed': tests.load_test}\">✓ Load Test</span>\n                <span class=\"test-item\" ng-class=\"{'passed': tests.fault_test}\">✓ Fault Test</span>\n                <span class=\"test-item\" ng-class=\"{'passed': tests.performance}\">✓ Performance</span>\n            </div>\n        </div>\n    </div>\n</div>\n\n<style>\n.kpi-performance-strip {\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    border: 2px solid #e9ecef;\n    padding: 15px;\n}\n\n.kpi-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 15px;\n    padding-bottom: 10px;\n    border-bottom: 2px solid #004B87;\n}\n\n.kpi-title {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-size: 16px;\n    font-weight: 700;\n    color: #004B87;\n}\n\n.kpi-icon {\n    font-size: 18px;\n}\n\n.kpi-timestamp {\n    font-size: 11px;\n    color: #6c757d;\n    font-style: italic;\n}\n\n.kpi-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 15px;\n    margin-bottom: 20px;\n}\n\n.kpi-card {\n    background: #f8f9fa;\n    border: 1px solid #dee2e6;\n    border-radius: 6px;\n    overflow: hidden;\n    transition: transform 0.2s;\n}\n\n.kpi-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.kpi-card-header {\n    background: linear-gradient(135deg, #004B87, #0056A3);\n    color: white;\n    padding: 10px 12px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.card-icon {\n    font-size: 16px;\n}\n\n.card-title {\n    font-size: 13px;\n    font-weight: 700;\n}\n\n.kpi-metrics {\n    padding: 12px;\n    display: flex;\n    justify-content: space-between;\n    gap: 10px;\n}\n\n.metric {\n    text-align: center;\n    flex: 1;\n}\n\n.metric-value {\n    font-size: 18px;\n    font-weight: 700;\n    font-family: 'Courier New', monospace;\n    margin-bottom: 4px;\n}\n\n.metric-value.excellent { color: #28a745; }\n.metric-value.good { color: #17a2b8; }\n.metric-value.acceptable { color: #ffc107; }\n.metric-value.poor { color: #fd7e14; }\n.metric-value.critical { color: #dc3545; }\n\n.metric-label {\n    font-size: 10px;\n    font-weight: 600;\n    color: #495057;\n    margin-bottom: 2px;\n    text-transform: uppercase;\n}\n\n.metric-target {\n    font-size: 9px;\n    color: #6c757d;\n    font-style: italic;\n}\n\n.kpi-summary {\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    gap: 20px;\n    align-items: center;\n    padding: 15px;\n    background: #f8f9fa;\n    border-radius: 6px;\n    border: 1px solid #dee2e6;\n}\n\n.overall-score {\n    display: flex;\n    align-items: center;\n}\n\n.score-circle {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    border: 4px solid;\n    transition: all 0.3s;\n}\n\n.score-circle.excellent {\n    background: #d4edda;\n    border-color: #28a745;\n    color: #155724;\n}\n\n.score-circle.good {\n    background: #d1ecf1;\n    border-color: #17a2b8;\n    color: #0c5460;\n}\n\n.score-circle.acceptable {\n    background: #fff3cd;\n    border-color: #ffc107;\n    color: #856404;\n}\n\n.score-circle.poor {\n    background: #ffeaa7;\n    border-color: #fd7e14;\n    color: #8a4116;\n}\n\n.score-circle.critical {\n    background: #f8d7da;\n    border-color: #dc3545;\n    color: #721c24;\n}\n\n.score-value {\n    font-size: 24px;\n    font-weight: 700;\n    line-height: 1;\n}\n\n.score-label {\n    font-size: 10px;\n    font-weight: 600;\n    text-transform: uppercase;\n}\n\n.performance-indicators {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.indicator {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 6px 10px;\n    border-radius: 4px;\n    font-size: 11px;\n    font-weight: 600;\n    transition: all 0.2s;\n}\n\n.indicator.excellent {\n    background: #d4edda;\n    color: #155724;\n    border-left: 4px solid #28a745;\n}\n\n.indicator.good {\n    background: #d1ecf1;\n    color: #0c5460;\n    border-left: 4px solid #17a2b8;\n}\n\n.indicator.acceptable {\n    background: #fff3cd;\n    color: #856404;\n    border-left: 4px solid #ffc107;\n}\n\n.indicator.poor {\n    background: #ffeaa7;\n    color: #8a4116;\n    border-left: 4px solid #fd7e14;\n}\n\n.indicator.critical {\n    background: #f8d7da;\n    color: #721c24;\n    border-left: 4px solid #dc3545;\n}\n\n.indicator-icon {\n    font-size: 14px;\n}\n\n.indicator-text {\n    flex: 1;\n    min-width: 70px;\n}\n\n.indicator-status {\n    font-size: 10px;\n    text-transform: uppercase;\n}\n\n.commissioning-status {\n    text-align: center;\n    min-width: 150px;\n}\n\n.commissioning-header {\n    font-size: 12px;\n    font-weight: 700;\n    color: #495057;\n    margin-bottom: 8px;\n    text-transform: uppercase;\n}\n\n.commissioning-progress {\n    margin-bottom: 10px;\n}\n\n.progress-bar {\n    width: 100%;\n    height: 8px;\n    background: #e9ecef;\n    border-radius: 4px;\n    overflow: hidden;\n    margin-bottom: 4px;\n}\n\n.progress-fill {\n    height: 100%;\n    background: linear-gradient(90deg, #28a745, #20c997);\n    border-radius: 4px;\n    transition: width 0.3s ease;\n}\n\n.progress-text {\n    font-size: 10px;\n    color: #6c757d;\n    font-weight: 600;\n}\n\n.commissioning-tests {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 4px;\n    justify-content: center;\n}\n\n.test-item {\n    font-size: 9px;\n    padding: 2px 4px;\n    border-radius: 2px;\n    background: #f8d7da;\n    color: #721c24;\n    font-weight: 600;\n}\n\n.test-item.passed {\n    background: #d4edda;\n    color: #155724;\n}\n\n@media (max-width: 1200px) {\n    .kpi-grid {\n        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n    }\n    \n    .kpi-summary {\n        grid-template-columns: 1fr;\n        text-align: center;\n        gap: 15px;\n    }\n    \n    .performance-indicators {\n        flex-direction: row;\n        flex-wrap: wrap;\n        justify-content: center;\n    }\n}\n</style>\n\n<script>\n(function(scope) {\n    // Mock KPI data for demonstration\n    scope.kpis = {\n        mae_f: 0.8,\n        overshoot_f: 1.2,\n        in_band_pct: 97,\n        saturation_pct: 2,\n        stability_index: 0.94,\n        response_time: 180,\n        runtime_balance: 52,\n        system_cop: 2.8,\n        cycle_count: 4,\n        pue: 1.35,\n        utilization_pct: 72,\n        peak_demand: 142\n    };\n    \n    scope.commissioningPct = 85;\n    scope.tests = {\n        baseline: true,\n        load_test: true,\n        fault_test: true,\n        performance: false\n    };\n    \n    scope.lastUpdate = new Date().toLocaleTimeString();\n    \n    scope.getKPIClass = function(kpiType, value) {\n        const thresholds = {\n            mae: { excellent: 0.5, good: 0.8, acceptable: 1.0, poor: 1.5 },\n            overshoot: { excellent: 1.0, good: 1.5, acceptable: 2.0, poor: 3.0 },\n            in_band: { excellent: 98, good: 95, acceptable: 90, poor: 85 },\n            saturation: { excellent: 2, good: 5, acceptable: 10, poor: 15 },\n            stability: { excellent: 0.95, good: 0.90, acceptable: 0.85, poor: 0.80 },\n            response: { excellent: 120, good: 240, acceptable: 360, poor: 600 },\n            balance: { excellent: 5, good: 10, acceptable: 15, poor: 25 },\n            efficiency: { excellent: 3.0, good: 2.5, acceptable: 2.0, poor: 1.5 },\n            cycling: { excellent: 3, good: 6, acceptable: 10, poor: 15 },\n            pue: { excellent: 1.2, good: 1.3, acceptable: 1.4, poor: 1.6 },\n            utilization: { excellent: 10, good: 20, acceptable: 30, poor: 40 },\n            demand: { excellent: 120, good: 135, acceptable: 150, poor: 170 }\n        };\n        \n        const t = thresholds[kpiType];\n        if (!t) return 'acceptable';\n        \n        if (['in_band', 'stability', 'efficiency'].includes(kpiType)) {\n            // Higher is better\n            if (value >= t.excellent) return 'excellent';\n            if (value >= t.good) return 'good';\n            if (value >= t.acceptable) return 'acceptable';\n            if (value >= t.poor) return 'poor';\n            return 'critical';\n        } else if (kpiType === 'balance') {\n            // Closer to 50% is better\n            const deviation = Math.abs(value - 50);\n            if (deviation <= t.excellent) return 'excellent';\n            if (deviation <= t.good) return 'good';\n            if (deviation <= t.acceptable) return 'acceptable';\n            if (deviation <= t.poor) return 'poor';\n            return 'critical';\n        } else if (kpiType === 'utilization') {\n            // 60-80% is optimal\n            const deviation = Math.min(Math.abs(value - 60), Math.abs(value - 80));\n            if (deviation <= t.excellent) return 'excellent';\n            if (deviation <= t.good) return 'good';\n            if (deviation <= t.acceptable) return 'acceptable';\n            if (deviation <= t.poor) return 'poor';\n            return 'critical';\n        } else {\n            // Lower is better\n            if (value <= t.excellent) return 'excellent';\n            if (value <= t.good) return 'good';\n            if (value <= t.acceptable) return 'acceptable';\n            if (value <= t.poor) return 'poor';\n            return 'critical';\n        }\n    };\n    \n    scope.getOverallScore = function() {\n        const scores = {\n            excellent: 100,\n            good: 85,\n            acceptable: 70,\n            poor: 55,\n            critical: 40\n        };\n        \n        const kpiScores = [\n            scope.getKPIClass('mae', scope.kpis.mae_f),\n            scope.getKPIClass('in_band', scope.kpis.in_band_pct),\n            scope.getKPIClass('saturation', scope.kpis.saturation_pct),\n            scope.getKPIClass('efficiency', scope.kpis.system_cop)\n        ];\n        \n        const avgScore = kpiScores.reduce((sum, score) => sum + scores[score], 0) / kpiScores.length;\n        return Math.round(avgScore);\n    };\n    \n    scope.getOverallScoreClass = function() {\n        const score = scope.getOverallScore();\n        if (score >= 95) return 'excellent';\n        if (score >= 80) return 'good';\n        if (score >= 65) return 'acceptable';\n        if (score >= 50) return 'poor';\n        return 'critical';\n    };\n    \n    scope.getIndicatorClass = function(category) {\n        const categoryMap = {\n            temperature: ['mae', 'in_band'],\n            control: ['saturation', 'stability'],\n            equipment: ['balance', 'efficiency'],\n            energy: ['pue', 'utilization']\n        };\n        \n        const kpis = categoryMap[category];\n        if (!kpis) return 'acceptable';\n        \n        const classes = kpis.map(kpi => scope.getKPIClass(kpi, scope.kpis[kpi + '_f'] || scope.kpis[kpi + '_pct'] || scope.kpis[kpi]));\n        \n        // Return the worst class\n        if (classes.includes('critical')) return 'critical';\n        if (classes.includes('poor')) return 'poor';\n        if (classes.includes('acceptable')) return 'acceptable';\n        if (classes.includes('good')) return 'good';\n        return 'excellent';\n    };\n    \n    scope.getIndicatorStatus = function(category) {\n        const statusMap = {\n            excellent: 'Optimal',\n            good: 'Good',\n            acceptable: 'OK',\n            poor: 'Attention',\n            critical: 'Critical'\n        };\n        \n        return statusMap[scope.getIndicatorClass(category)] || 'Unknown';\n    };\n    \n    scope.getCommissioningProgress = function() {\n        return {\n            width: scope.commissioningPct + '%'\n        };\n    };\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 340,
        "wires": [[]]
    },
    {
        "id": "mock_data_generator",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Professional Mock Data Generator",
        "func": "// Professional BAS mock data generator for portfolio demonstration\n// Simulates realistic data center cooling system with proper engineering values\n\nconst now = new Date();\nconst timeString = now.toLocaleTimeString('en-US', { hour12: false });\nconst timestamp = now.toISOString();\n\n// Simulation state management\nif (!context.simulation) {\n    context.simulation = {\n        time_s: 0,\n        setpoint_f: 72.0,\n        room_temp_f: 72.1,\n        load_kw: 85.0,\n        pid_integral: 0,\n        crac_states: {\n            'CRAC-01': { output: 0, runtime_h: 1247, starts: 23, role: 'LEAD' },\n            'CRAC-02': { output: 0, runtime_h: 892, starts: 41, role: 'LAG' },\n            'CRAC-03': { output: 0, runtime_h: 156, starts: 8, role: 'STANDBY' }\n        },\n        scenario: 'baseline',\n        faults: {},\n        alarms: [],\n        kpi_history: []\n    }\n}\n\nconst sim = context.simulation;\nsim.time_s += 5; // 5 second intervals\n\n// Temperature simulation with realistic dynamics\nconst load_factor = 1.0 + 0.1 * Math.sin(sim.time_s / 300); // 5-minute load cycle\nsim.load_kw = 85 * load_factor;\n\n// PID Controller simulation\nconst error_f = sim.room_temp_f - sim.setpoint_f;\nconst kp = 2.5, ki = 0.1, kd = 0.05;\n\nconst p_term = kp * error_f;\nsim.pid_integral += error_f * (5/60); // 5 second interval\nconst i_term = ki * sim.pid_integral;\nconst d_term = kd * (error_f - (sim.last_error || 0)) / (5/60);\nsim.last_error = error_f;\n\nconst pid_output = Math.max(0, Math.min(100, p_term + i_term + d_term + 50)); // 50% bias\n\n// CRAC staging logic\nlet lead_output = 0, lag_output = 0, standby_output = 0;\nif (pid_output > 10) {\n    lead_output = Math.min(100, pid_output);\n    if (pid_output > 80) {\n        lag_output = Math.min(100, (pid_output - 80) * 5);\n        if (pid_output > 95) {\n            standby_output = Math.min(100, (pid_output - 95) * 10);\n        }\n    }\n}\n\nsim.crac_states['CRAC-01'].output = lead_output;\nsim.crac_states['CRAC-02'].output = lag_output;\nsim.crac_states['CRAC-03'].output = standby_output;\n\n// Temperature dynamics\nconst total_cooling = (lead_output * 0.35 + lag_output * 0.30 + standby_output * 0.25) / 100;\nconst temp_change = (sim.load_kw * 0.012 - total_cooling * 25) * (5/3600); // °F per 5 seconds\nsim.room_temp_f += temp_change + (Math.random() - 0.5) * 0.02; // Add noise\n\n// Generate multiple data streams for different components\nconst messages = [];\n\n// 1. Top Status Bar Data\nmessages.push({\n    topic: 'update/top_bar',\n    payload: {\n        scenario_name: sim.scenario,\n        sim_time: Math.floor(sim.time_s / 3600).toString().padStart(2, '0') + ':' + \n                 Math.floor((sim.time_s % 3600) / 60).toString().padStart(2, '0') + ':' + \n                 (sim.time_s % 60).toString().padStart(2, '0'),\n        realtime_factor: '1.0',\n        setpoint_f: sim.setpoint_f.toFixed(1),\n        deadband_f: '1.0',\n        room_temp_f: sim.room_temp_f.toFixed(1),\n        temp_error_f: error_f.toFixed(1),\n        lead_unit: 'CRAC-01',\n        lag_unit: 'CRAC-02',\n        standby_unit: 'CRAC-03'\n    }\n});\n\n// 2. CRAC Equipment Cards Data\nconst cracData = [];\nObject.keys(sim.crac_states).forEach((id, index) => {\n    const crac = sim.crac_states[id];\n    const cooling_kw = (crac.output / 100) * [35, 30, 25][index];\n    const power_kw = cooling_kw > 0 ? (cooling_kw / 2.8 + 0.5) : 0.5; // COP of 2.8\n    \n    cracData.push({\n        id: id,\n        role: crac.role,\n        status: crac.output > 5 ? 'running' : 'off',\n        output_pct: Math.round(crac.output),\n        supply_temp_f: crac.output > 5 ? (58 + (1 - crac.output/100) * 3).toFixed(1) : '--',\n        cooling_kw: cooling_kw.toFixed(1),\n        power_kw: power_kw.toFixed(1),\n        runtime_h: crac.runtime_h + Math.floor(sim.time_s / 3600),\n        start_count: crac.starts,\n        alarms: 0\n    });\n});\n\nmessages.push({\n    topic: 'update/crac_cards',\n    payload: { cracUnits: cracData }\n});\n\n// 3. KPI Data\nconst mae_f = 0.6 + Math.random() * 0.4; // 0.6-1.0°F\nconst in_band_pct = 95 + Math.random() * 4; // 95-99%\nconst saturation_pct = pid_output >= 99 ? 5 : 1;\nconst system_cop = total_cooling > 0 ? (total_cooling * 90) / (lead_output * 0.125 + lag_output * 0.107 + standby_output * 0.089 + 1.5) : 0;\n\nmessages.push({\n    topic: 'update/kpis',\n    payload: {\n        kpis: {\n            mae_f: mae_f.toFixed(1),\n            overshoot_f: Math.max(0, sim.room_temp_f - sim.setpoint_f).toFixed(1),\n            in_band_pct: Math.round(in_band_pct),\n            saturation_pct: Math.round(saturation_pct),\n            stability_index: (0.90 + Math.random() * 0.08).toFixed(2),\n            response_time: Math.round(180 + Math.random() * 60),\n            runtime_balance: Math.round(45 + Math.random() * 10),\n            system_cop: system_cop.toFixed(1),\n            cycle_count: Math.round(3 + Math.random() * 3),\n            pue: (1.30 + Math.random() * 0.10).toFixed(2),\n            utilization_pct: Math.round(65 + Math.random() * 15),\n            peak_demand: Math.round(130 + Math.random() * 20)\n        },\n        lastUpdate: timeString\n    }\n});\n\n// 4. Alarm Data (occasional alarms for realism)\nif (Math.random() < 0.05) { // 5% chance per update\n    const alarmTypes = [\n        { priority: 'medium', code: 'M-021', asset: 'CRAC-02', description: 'Filter differential high' },\n        { priority: 'low', code: 'L-105', asset: 'ROOM-01', description: 'Temperature deviation' },\n        { priority: 'high', code: 'H-003', asset: 'CRAC-01', description: 'High discharge pressure' }\n    ];\n    \n    const alarm = alarmTypes[Math.floor(Math.random() * alarmTypes.length)];\n    alarm.timestamp = timestamp;\n    alarm.state = 'active';\n    \n    sim.alarms.push(alarm);\n    \n    // Keep only last 5 alarms\n    if (sim.alarms.length > 5) {\n        sim.alarms = sim.alarms.slice(-5);\n    }\n}\n\n// Age alarms\nsim.alarms.forEach(alarm => {\n    if (alarm.state === 'active' && Math.random() < 0.1) {\n        alarm.state = 'acknowledged';\n    }\n});\n\nconst alarmCounts = {\n    critical: sim.alarms.filter(a => a.priority === 'critical' && a.state === 'active').length,\n    high: sim.alarms.filter(a => a.priority === 'high' && a.state === 'active').length,\n    medium: sim.alarms.filter(a => a.priority === 'medium' && a.state === 'active').length,\n    low: sim.alarms.filter(a => a.priority === 'low' && a.state === 'active').length\n};\n\nmessages.push({\n    topic: 'update/alarms',\n    payload: {\n        activeAlarms: sim.alarms,\n        alarmCounts: alarmCounts,\n        pendingAlarms: Math.floor(Math.random() * 3),\n        debounceTime: 30,\n        debounceProgress: Math.floor(Math.random() * 100)\n    }\n});\n\n// 5. Chart Data (for future chart implementation)\nmessages.push({\n    topic: 'update/charts',\n    payload: {\n        timestamp: sim.time_s,\n        room_temp_f: sim.room_temp_f,\n        setpoint_f: sim.setpoint_f,\n        controller_output: pid_output,\n        p_term: p_term,\n        i_term: i_term,\n        d_term: d_term\n    }\n});\n\n// Save simulation state\ncontext.simulation = sim;\n\n// Return all messages\nreturn [messages];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 200,
        "y": 440,
        "wires": [["data_distributor"]]
    },
    {
        "id": "data_distributor",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Data Distribution Router",
        "func": "// Route data to appropriate dashboard components\nconst messages = msg.payload;\nconst outputs = [null, null, null, null, null]; // 5 outputs\n\nmessages.forEach(message => {\n    switch(message.topic) {\n        case 'update/top_bar':\n            outputs[0] = message;\n            break;\n        case 'update/crac_cards':\n            outputs[1] = message;\n            break;\n        case 'update/alarms':\n            outputs[2] = message;\n            break;\n        case 'update/kpis':\n            outputs[3] = message;\n            break;\n        case 'update/charts':\n            outputs[4] = message;\n            break;\n    }\n});\n\nreturn outputs;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 440,
        "wires": [
            ["top_status_bar"],
            ["crac_equipment_cards"],
            ["alarm_management_panel"],
            ["kpi_performance_strip"],
            ["technical_charts"]
        ]
    },
    {
        "id": "data_timer",
        "type": "inject",
        "z": "f7c23e1a.b3c8a",
        "name": "5 Second Update Timer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "timer",
        "payload": "{}",
        "payloadType": "json",
        "x": 200,
        "y": 380,
        "wires": [["mock_data_generator"]]
    },
    {
        "id": "command_output",
        "type": "debug",
        "z": "f7c23e1a.b3c8a",
        "name": "Command Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 380,
        "wires": []
    }
]