[
    {
        "id": "f7c23e1a.b3c8a",
        "type": "tab",
        "label": "Data Center BAS HMI",
        "disabled": false,
        "info": "Professional HMI Dashboard for Data Center Cooling System\n\nFeatures:\n- Real-time zone temperature display\n- CRAC unit status monitoring\n- Active alarms panel\n- System controls and manual overrides\n- Performance trending"
    },
    {
        "id": "1a2b3c4d.e5f6g7",
        "type": "ui_group",
        "name": "Zone Temperature",
        "tab": "f7c23e1a.b3c8a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2b3c4d5e.f6g7h8",
        "type": "ui_group",
        "name": "CRAC Units",
        "tab": "f7c23e1a.b3c8a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3c4d5e6f.g7h8i9",
        "type": "ui_group",
        "name": "Active Alarms",
        "tab": "f7c23e1a.b3c8a",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "4d5e6f7g.h8i9j0",
        "type": "ui_group",
        "name": "System Controls",
        "tab": "f7c23e1a.b3c8a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5e6f7g8h.i9j0k1",
        "type": "ui_group",
        "name": "Performance Trends",
        "tab": "f7c23e1a.b3c8a",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "data_source_mqtt",
        "type": "mqtt in",
        "z": "f7c23e1a.b3c8a",
        "name": "BAS Data Input",
        "topic": "datacenter/+/+",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 100,
        "wires": [["data_parser"]]
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "nodered_hmi",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "data_parser",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Parse BAS Data",
        "func": "// Parse incoming MQTT data from BAS simulation\nconst topic = msg.topic;\nconst data = msg.payload;\n\n// Route data based on topic\nif (topic.includes('/room/')) {\n    // Room temperature data\n    msg.payload = {\n        temp_c: data.temp_c || 22.0,\n        setpoint_c: data.setpoint_c || 22.0,\n        it_load_kw: data.it_load_kw || 0,\n        timestamp: new Date().toISOString()\n    };\n    return [msg, null, null, null];\n} else if (topic.includes('/crac/')) {\n    // CRAC unit data\n    msg.payload = {\n        unit_id: data.unit_id || 'UNKNOWN',\n        role: data.role || 'standby',\n        status: data.status || 'off',\n        cmd_pct: data.cmd_pct || 0,\n        q_cool_kw: data.q_cool_kw || 0,\n        power_kw: data.power_kw || 0,\n        failed: data.failed || false,\n        timestamp: new Date().toISOString()\n    };\n    return [null, msg, null, null];\n} else if (topic.includes('/alarms/')) {\n    // Alarm data\n    msg.payload = {\n        active_alarms: data.active_alarms || [],\n        alarm_summary: data.alarm_summary || {},\n        timestamp: new Date().toISOString()\n    };\n    return [null, null, msg, null];\n} else if (topic.includes('/system/')) {\n    // System performance data\n    msg.payload = {\n        total_cooling_kw: data.total_cooling_kw || 0,\n        total_power_kw: data.total_power_kw || 0,\n        efficiency_cop: data.efficiency_cop || 0,\n        lag_staged: data.lag_staged || false,\n        standby_staged: data.standby_staged || false,\n        timestamp: new Date().toISOString()\n    };\n    return [null, null, null, msg];\n}\n\nreturn null;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 100,
        "wires": [
            ["room_temp_display", "temp_chart_data"],
            ["crac_status_table"],
            ["alarm_display"],
            ["system_metrics"]
        ]
    },
    {
        "id": "room_temp_display",
        "type": "ui_gauge",
        "z": "f7c23e1a.b3c8a",
        "name": "Zone Temperature",
        "group": "1a2b3c4d.e5f6g7",
        "order": 1,
        "width": "3",
        "height": "3",
        "gtype": "gage",
        "title": "Zone Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": "18",
        "max": "28",
        "colors": [
            "#00b4d8",
            "#90e0ef",
            "#caf0f8",
            "#ade8f4",
            "#ffd166",
            "#f77f00",
            "#d62828"
        ],
        "seg1": "20",
        "seg2": "21.5",
        "className": "",
        "x": 560,
        "y": 60,
        "wires": []
    },
    {
        "id": "temp_setpoint_display",
        "type": "ui_text",
        "z": "f7c23e1a.b3c8a",
        "group": "1a2b3c4d.e5f6g7",
        "order": 2,
        "width": "3",
        "height": "1",
        "name": "Setpoint Display",
        "label": "Setpoint:",
        "format": "{{msg.payload.setpoint_c}} °C",
        "layout": "row-spread",
        "className": "",
        "x": 580,
        "y": 120,
        "wires": []
    },
    {
        "id": "temp_error_display",
        "type": "ui_text",
        "z": "f7c23e1a.b3c8a",
        "group": "1a2b3c4d.e5f6g7",
        "order": 3,
        "width": "3",
        "height": "1",
        "name": "Temperature Error",
        "label": "Error:",
        "format": "{{(msg.payload.temp_c - msg.payload.setpoint_c).toFixed(2)}} °C",
        "layout": "row-spread",
        "className": "",
        "x": 590,
        "y": 180,
        "wires": []
    },
    {
        "id": "crac_status_table",
        "type": "ui_table",
        "z": "f7c23e1a.b3c8a",
        "group": "2b3c4d5e.f6g7h8",
        "name": "CRAC Status",
        "order": 1,
        "width": "6",
        "height": "4",
        "columns": [
            {
                "field": "unit_id",
                "title": "Unit",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {}
            },
            {
                "field": "role",
                "title": "Role",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {}
            },
            {
                "field": "status",
                "title": "Status",
                "width": "",
                "align": "center",
                "formatter": "color",
                "formatterParams": {
                    "running": "#28a745",
                    "starting": "#ffc107",
                    "stopping": "#fd7e14",
                    "off": "#6c757d",
                    "failed": "#dc3545"
                }
            },
            {
                "field": "cmd_pct",
                "title": "Command %",
                "width": "",
                "align": "center",
                "formatter": "progress",
                "formatterParams": {
                    "min": 0,
                    "max": 100,
                    "color": "#007bff"
                }
            },
            {
                "field": "q_cool_kw",
                "title": "Cooling kW",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {}
            },
            {
                "field": "power_kw",
                "title": "Power kW",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {}
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 570,
        "y": 260,
        "wires": []
    },
    {
        "id": "alarm_display",
        "type": "ui_table",
        "z": "f7c23e1a.b3c8a",
        "group": "3c4d5e6f.g7h8i9",
        "name": "Active Alarms",
        "order": 1,
        "width": "12",
        "height": "3",
        "columns": [
            {
                "field": "priority",
                "title": "Priority",
                "width": "",
                "align": "center",
                "formatter": "color",
                "formatterParams": {
                    "critical": "#dc3545",
                    "high": "#fd7e14",
                    "medium": "#ffc107",
                    "low": "#28a745"
                }
            },
            {
                "field": "alarm_id",
                "title": "Alarm ID",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {}
            },
            {
                "field": "description",
                "title": "Description",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {}
            },
            {
                "field": "state",
                "title": "State",
                "width": "",
                "align": "center",
                "formatter": "color",
                "formatterParams": {
                    "active": "#dc3545",
                    "acknowledged": "#ffc107",
                    "cleared": "#28a745"
                }
            },
            {
                "field": "alarm_time",
                "title": "Alarm Time",
                "width": "",
                "align": "center",
                "formatter": "datetime",
                "formatterParams": {
                    "inputFormat": "iso",
                    "outputFormat": "HH:mm:ss"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 570,
        "y": 340,
        "wires": []
    },
    {
        "id": "setpoint_slider",
        "type": "ui_slider",
        "z": "f7c23e1a.b3c8a",
        "name": "Temperature Setpoint",
        "label": "Setpoint °C",
        "tooltip": "Adjust zone temperature setpoint",
        "group": "4d5e6f7g.h8i9j0",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": true,
        "outs": "end",
        "topic": "setpoint",
        "min": "18",
        "max": "26",
        "step": "0.1",
        "className": "",
        "x": 180,
        "y": 420,
        "wires": [["setpoint_command"]]
    },
    {
        "id": "setpoint_command",
        "type": "mqtt out",
        "z": "f7c23e1a.b3c8a",
        "name": "Send Setpoint Command",
        "topic": "datacenter/commands/setpoint",
        "qos": "1",
        "retain": "false",
        "broker": "mqtt_broker",
        "x": 420,
        "y": 420,
        "wires": []
    },
    {
        "id": "role_rotation_button",
        "type": "ui_button",
        "z": "f7c23e1a.b3c8a",
        "name": "Force Role Rotation",
        "group": "4d5e6f7g.h8i9j0",
        "order": 2,
        "width": "3",
        "height": "1",
        "label": "Rotate Roles",
        "tooltip": "Force immediate LEAD/LAG role rotation",
        "color": "",
        "bgcolor": "#007bff",
        "icon": "",
        "payload": "{\"command\": \"rotate_roles\"}",
        "payloadType": "json",
        "topic": "role_rotation",
        "x": 200,
        "y": 480,
        "wires": [["role_rotation_command"]]
    },
    {
        "id": "role_rotation_command",
        "type": "mqtt out",
        "z": "f7c23e1a.b3c8a",
        "name": "Send Role Rotation",
        "topic": "datacenter/commands/role_rotation",
        "qos": "1",
        "retain": "false",
        "broker": "mqtt_broker",
        "x": 430,
        "y": 480,
        "wires": []
    },
    {
        "id": "it_load_slider",
        "type": "ui_slider",
        "z": "f7c23e1a.b3c8a",
        "name": "IT Load",
        "label": "IT Load kW",
        "tooltip": "Adjust server/IT load for testing",
        "group": "4d5e6f7g.h8i9j0",
        "order": 3,
        "width": "6",
        "height": "1",
        "passthru": true,
        "outs": "end",
        "topic": "it_load",
        "min": "20",
        "max": "100",
        "step": "5",
        "className": "",
        "x": 160,
        "y": 540,
        "wires": [["it_load_command"]]
    },
    {
        "id": "it_load_command",
        "type": "mqtt out",
        "z": "f7c23e1a.b3c8a",
        "name": "Send IT Load Command",
        "topic": "datacenter/commands/it_load",
        "qos": "1",
        "retain": "false",
        "broker": "mqtt_broker",
        "x": 420,
        "y": 540,
        "wires": []
    },
    {
        "id": "failure_injection",
        "type": "ui_dropdown",
        "z": "f7c23e1a.b3c8a",
        "name": "Failure Injection",
        "label": "Inject Failure:",
        "tooltip": "Simulate equipment failures for testing",
        "place": "Select Unit",
        "group": "4d5e6f7g.h8i9j0",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "CRAC-01",
                "value": "CRAC-01",
                "type": "str"
            },
            {
                "label": "CRAC-02",
                "value": "CRAC-02",
                "type": "str"
            },
            {
                "label": "CRAC-03",
                "value": "CRAC-03",
                "type": "str"
            },
            {
                "label": "Clear All",
                "value": "clear_all",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "failure_injection",
        "x": 190,
        "y": 600,
        "wires": [["failure_command"]]
    },
    {
        "id": "failure_command",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Format Failure Command",
        "func": "msg.payload = {\n    command: \"inject_failure\",\n    unit_id: msg.payload,\n    timestamp: new Date().toISOString()\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 600,
        "wires": [["failure_mqtt_out"]]
    },
    {
        "id": "failure_mqtt_out",
        "type": "mqtt out",
        "z": "f7c23e1a.b3c8a",
        "name": "Send Failure Command",
        "topic": "datacenter/commands/failure",
        "qos": "1",
        "retain": "false",
        "broker": "mqtt_broker",
        "x": 650,
        "y": 600,
        "wires": []
    },
    {
        "id": "temp_chart_data",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Prepare Chart Data",
        "func": "// Prepare data for temperature trend chart\nconst timestamp = new Date().getTime();\n\n// Temperature data\nmsg.payload = [{\n    series: [\"Zone Temp\", \"Setpoint\"],\n    data: [\n        [timestamp, msg.payload.temp_c],\n        [timestamp, msg.payload.setpoint_c]\n    ],\n    labels: [\"Temperature\"]\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 700,
        "wires": [["temp_trend_chart"]]
    },
    {
        "id": "temp_trend_chart",
        "type": "ui_chart",
        "z": "f7c23e1a.b3c8a",
        "name": "Temperature Trend",
        "group": "5e6f7g8h.i9j0k1",
        "order": 1,
        "width": "6",
        "height": "4",
        "label": "Temperature Trend",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Data",
        "dot": false,
        "ymin": "18",
        "ymax": "28",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#bcbd22",
            "#17becf"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 700,
        "wires": [[]]
    },
    {
        "id": "system_metrics",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Prepare Performance Data",
        "func": "// Prepare data for cooling performance chart\nconst timestamp = new Date().getTime();\n\n// Cooling performance data\nmsg.payload = [{\n    series: [\"Total Cooling\", \"Total Power\"],\n    data: [\n        [timestamp, msg.payload.total_cooling_kw],\n        [timestamp, msg.payload.total_power_kw]\n    ],\n    labels: [\"Power (kW)\"]\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 760,
        "wires": [["cooling_performance_chart"]]
    },
    {
        "id": "cooling_performance_chart",
        "type": "ui_chart",
        "z": "f7c23e1a.b3c8a",
        "name": "Cooling Performance",
        "group": "5e6f7g8h.i9j0k1",
        "order": 2,
        "width": "6",
        "height": "4",
        "label": "Cooling Performance",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Data",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#17becf",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#bcbd22",
            "#1f77b4"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 760,
        "wires": [[]]
    },
    {
        "id": "system_status_indicators",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "2b3c4d5e.f6g7h8",
        "name": "Staging Status",
        "order": 2,
        "width": "6",
        "height": "2",
        "format": "<div style=\"display: flex; justify-content: space-around; padding: 10px;\">\n    <div style=\"text-align: center;\">\n        <div style=\"font-size: 14px; color: #666;\">LAG Staged</div>\n        <div ng-style=\"{'color': msg.payload.lag_staged ? '#28a745' : '#6c757d', 'font-size': '20px', 'font-weight': 'bold'}\">\n            {{msg.payload.lag_staged ? 'YES' : 'NO'}}\n        </div>\n    </div>\n    <div style=\"text-align: center;\">\n        <div style=\"font-size: 14px; color: #666;\">STANDBY Staged</div>\n        <div ng-style=\"{'color': msg.payload.standby_staged ? '#dc3545' : '#6c757d', 'font-size': '20px', 'font-weight': 'bold'}\">\n            {{msg.payload.standby_staged ? 'YES' : 'NO'}}\n        </div>\n    </div>\n    <div style=\"text-align: center;\">\n        <div style=\"font-size: 14px; color: #666;\">System COP</div>\n        <div style=\"color: #007bff; font-size: 20px; font-weight: bold;\">\n            {{(msg.payload.efficiency_cop || 0).toFixed(1)}}\n        </div>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 820,
        "wires": [[]]
    },
    {
        "id": "alarm_summary_display",
        "type": "ui_template",
        "z": "f7c23e1a.b3c8a",
        "group": "3c4d5e6f.g7h8i9",
        "name": "Alarm Summary",
        "order": 2,
        "width": "12",
        "height": "1",
        "format": "<div style=\"display: flex; justify-content: space-around; padding: 5px; border: 1px solid #ddd; border-radius: 4px;\">\n    <div style=\"text-align: center;\">\n        <span style=\"color: #dc3545; font-weight: bold;\">Critical:</span>\n        <span style=\"color: #dc3545; font-size: 18px; font-weight: bold;\">{{msg.payload.alarm_summary.priority_breakdown.critical || 0}}</span>\n    </div>\n    <div style=\"text-align: center;\">\n        <span style=\"color: #fd7e14; font-weight: bold;\">High:</span>\n        <span style=\"color: #fd7e14; font-size: 18px; font-weight: bold;\">{{msg.payload.alarm_summary.priority_breakdown.high || 0}}</span>\n    </div>\n    <div style=\"text-align: center;\">\n        <span style=\"color: #ffc107; font-weight: bold;\">Medium:</span>\n        <span style=\"color: #ffc107; font-size: 18px; font-weight: bold;\">{{msg.payload.alarm_summary.priority_breakdown.medium || 0}}</span>\n    </div>\n    <div style=\"text-align: center;\">\n        <span style=\"color: #28a745; font-weight: bold;\">Low:</span>\n        <span style=\"color: #28a745; font-size: 18px; font-weight: bold;\">{{msg.payload.alarm_summary.priority_breakdown.low || 0}}</span>\n    </div>\n    <div style=\"text-align: center;\">\n        <span style=\"color: #333; font-weight: bold;\">Total Active:</span>\n        <span style=\"color: #333; font-size: 18px; font-weight: bold;\">{{msg.payload.alarm_summary.active_alarms || 0}}</span>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 590,
        "y": 880,
        "wires": [[]]
    },
    {
        "id": "http_data_endpoint",
        "type": "http in",
        "z": "f7c23e1a.b3c8a",
        "name": "BAS Data API",
        "url": "/api/bas-data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 200,
        "wires": [["http_data_parser"]]
    },
    {
        "id": "http_data_parser",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Parse HTTP Data",
        "func": "// Parse incoming HTTP POST data from BAS simulation\nconst data = msg.payload;\n\n// Process room data\nif (data.room) {\n    const roomMsg = {payload: data.room, topic: 'datacenter/room/data'};\n    node.send([roomMsg, null, null, null, null]);\n}\n\n// Process CRAC data\nif (data.cracs && Array.isArray(data.cracs)) {\n    data.cracs.forEach(crac => {\n        const cracMsg = {payload: crac, topic: `datacenter/crac/${crac.unit_id}`};\n        node.send([null, cracMsg, null, null, null]);\n    });\n}\n\n// Process alarm data\nif (data.alarms) {\n    const alarmMsg = {payload: data.alarms, topic: 'datacenter/alarms/active'};\n    node.send([null, null, alarmMsg, null, null]);\n}\n\n// Process system data\nif (data.system) {\n    const systemMsg = {payload: data.system, topic: 'datacenter/system/performance'};\n    node.send([null, null, null, systemMsg, null]);\n}\n\n// Send HTTP response\nconst responseMsg = {\n    payload: {status: 'success', timestamp: new Date().toISOString()},\n    statusCode: 200\n};\nnode.send([null, null, null, null, responseMsg]);\n\nreturn null;",
        "outputs": 5,
        "noerr": 0,
        "x": 350,
        "y": 200,
        "wires": [
            ["room_temp_display", "temp_chart_data"],
            ["crac_status_table"],
            ["alarm_display", "alarm_summary_display"],
            ["system_metrics", "system_status_indicators"],
            ["http_response"]
        ]
    },
    {
        "id": "http_response",
        "type": "http response",
        "z": "f7c23e1a.b3c8a",
        "name": "Send HTTP Response",
        "statusCode": "",
        "headers": {},
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "websocket_data",
        "type": "websocket in",
        "z": "f7c23e1a.b3c8a",
        "name": "WebSocket Data",
        "server": "ws_server",
        "client": "",
        "x": 140,
        "y": 300,
        "wires": [["websocket_parser"]]
    },
    {
        "id": "ws_server",
        "type": "websocket-listener",
        "path": "/ws/bas-data",
        "wholemsg": "false"
    },
    {
        "id": "websocket_parser",
        "type": "function",
        "z": "f7c23e1a.b3c8a",
        "name": "Parse WebSocket Data",
        "func": "// Parse incoming WebSocket data\ntry {\n    const data = JSON.parse(msg.payload);\n    \n    // Route based on data type\n    if (data.type === 'room_update') {\n        msg.payload = data.data;\n        msg.topic = 'datacenter/room/data';\n        return [msg, null, null, null];\n    } else if (data.type === 'crac_update') {\n        msg.payload = data.data;\n        msg.topic = `datacenter/crac/${data.data.unit_id}`;\n        return [null, msg, null, null];\n    } else if (data.type === 'alarm_update') {\n        msg.payload = data.data;\n        msg.topic = 'datacenter/alarms/active';\n        return [null, null, msg, null];\n    } else if (data.type === 'system_update') {\n        msg.payload = data.data;\n        msg.topic = 'datacenter/system/performance';\n        return [null, null, null, msg];\n    }\n} catch (e) {\n    node.error('Failed to parse WebSocket data: ' + e.message);\n}\n\nreturn null;",
        "outputs": 4,
        "noerr": 0,
        "x": 370,
        "y": 300,
        "wires": [
            ["room_temp_display", "temp_chart_data"],
            ["crac_status_table"],
            ["alarm_display", "alarm_summary_display"],
            ["system_metrics", "system_status_indicators"]
        ]
    }
]