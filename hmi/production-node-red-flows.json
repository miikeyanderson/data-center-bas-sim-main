[
  {
    "id": "main_tab",
    "type": "ui_tab",
    "name": "BAS Demo",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "status_group",
    "type": "ui_group",
    "name": "Status",
    "tab": "main_tab",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "cracs_group", 
    "type": "ui_group",
    "name": "CRACs",
    "tab": "main_tab", 
    "order": 2,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "alarms_group",
    "type": "ui_group", 
    "name": "Alarms",
    "tab": "main_tab",
    "order": 3,
    "disp": true,
    "width": "12", 
    "collapse": false
  },
  {
    "id": "trends_group",
    "type": "ui_group",
    "name": "Trends", 
    "tab": "main_tab",
    "order": 4,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "kpis_group",
    "type": "ui_group",
    "name": "KPIs",
    "tab": "main_tab",
    "order": 5, 
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "controls_group",
    "type": "ui_group",
    "name": "Controls",
    "tab": "main_tab",
    "order": 6,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "mock_data_timer",
    "type": "inject",
    "z": "main_flow",
    "name": "500ms Update Timer",
    "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
    "repeat": "0.5",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "timer",
    "payload": "",
    "payloadType": "date",
    "x": 140,
    "y": 100,
    "wires": [["mock_data_generator"]]
  },
  {
    "id": "mock_data_generator", 
    "type": "function",
    "z": "main_flow",
    "name": "Mock Data Generator",
    "func": "// Production BAS Mock Data Generator\nconst now = Date.now();\nconst t = (now / 1000) % 3600; // Sim time in seconds (resets every hour)\n\n// Simulate realistic BAS behavior\nconst setpoint_f = 72.0;\nconst temp_f = setpoint_f + 0.3 * Math.sin(t/120) + 0.1 * Math.random() - 0.05;\nconst error_f = temp_f - setpoint_f;\n\n// PID controller simulation\nconst kp = 3.0, ki = 0.15, kd = 0.8;\nconst p_term = kp * error_f;\nconst i_term = Math.min(Math.max(-10, (context.get('i_accum') || 0) + ki * error_f), 10);\nconst d_term = kd * (error_f - (context.get('last_error') || 0));\nconst output_pct = Math.min(Math.max(0, p_term + i_term + d_term + 50), 100);\nconst clamped = output_pct <= 0 || output_pct >= 100;\n\n// Store for next iteration\ncontext.set('i_accum', i_term);\ncontext.set('last_error', error_f);\n\n// CRAC staging logic\nconst lead_pct = Math.min(output_pct, 100);\nconst lag_pct = Math.max(0, output_pct - 100);\nconst lag_on = lag_pct > 5;\n\n// Simulate CRAC failures based on scenario\nconst scenario = context.get('scenario') || 'baseline';\nlet crac3_fail = false;\nif (scenario === 'crac_failure' && t > 300) crac3_fail = true;\n\n// Build structured payload\nmsg.payload = {\n  \"sim\": {\n    \"time_s\": Math.floor(t),\n    \"rtx\": 50.0\n  },\n  \"room\": {\n    \"sp_f\": setpoint_f,\n    \"temp_f\": parseFloat(temp_f.toFixed(1)),\n    \"err_f\": parseFloat(error_f.toFixed(2))\n  },\n  \"ctrl\": {\n    \"p\": parseFloat(p_term.toFixed(1)),\n    \"i\": parseFloat(i_term.toFixed(1)), \n    \"d\": parseFloat(d_term.toFixed(1)),\n    \"out_pct\": parseFloat(output_pct.toFixed(1)),\n    \"clamped\": clamped\n  },\n  \"load\": {\n    \"kw\": parseFloat((35 + 15 * Math.sin(t/300)).toFixed(1))\n  },\n  \"capacity\": {\n    \"kw\": 150.0,\n    \"margin_pct\": parseFloat((100 - output_pct).toFixed(1))\n  },\n  \"crac\": [\n    {\n      \"id\": \"CRAC1\",\n      \"role\": \"LEAD\", \n      \"on\": 1,\n      \"out_pct\": parseFloat(lead_pct.toFixed(1)),\n      \"sup_f\": parseFloat((55 + 2 * Math.random()).toFixed(1)),\n      \"runtime_h\": parseFloat((t/3600).toFixed(2)),\n      \"starts\": 1,\n      \"alarm\": 0\n    },\n    {\n      \"id\": \"CRAC2\",\n      \"role\": \"LAG\",\n      \"on\": lag_on ? 1 : 0,\n      \"out_pct\": lag_on ? parseFloat(lag_pct.toFixed(1)) : 0,\n      \"sup_f\": lag_on ? parseFloat((57 + 2 * Math.random()).toFixed(1)) : null,\n      \"runtime_h\": lag_on ? parseFloat((Math.max(0, t-180)/3600).toFixed(2)) : 0,\n      \"starts\": lag_on ? 1 : 0,\n      \"alarm\": 0\n    },\n    {\n      \"id\": \"CRAC3\",\n      \"role\": \"STANDBY\",\n      \"on\": crac3_fail ? 0 : 0,\n      \"out_pct\": 0,\n      \"sup_f\": null,\n      \"runtime_h\": 0,\n      \"starts\": 0,\n      \"alarm\": crac3_fail ? 1 : 0\n    }\n  ],\n  \"alarms\": crac3_fail ? [\n    {\n      \"ts\": new Date().toISOString(),\n      \"prio\": \"HIGH\",\n      \"code\": \"CRAC_FAIL\",\n      \"asset\": \"CRAC3\", \n      \"state\": \"ACTIVE\"\n    }\n  ] : [],\n  \"kpi\": {\n    \"mae_f\": parseFloat(Math.abs(error_f).toFixed(2)),\n    \"in_band_pct\": Math.abs(error_f) < 0.5 ? 100 : 85,\n    \"sat_pct\": clamped ? 100 : 0,\n    \"balance_pct\": [lag_on ? 70 : 100, lag_on ? 30 : 0, 0]\n  }\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 380,
    "y": 100,
    "wires": [["data_router", "rate_limiter"]]
  },
  {
    "id": "rate_limiter",
    "type": "delay",
    "z": "main_flow", 
    "name": "Rate Limit Charts",
    "pauseType": "rate",
    "timeout": "1",
    "timeoutUnits": "seconds",
    "rate": "2",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": true,
    "x": 600,
    "y": 160,
    "wires": [["chart_router"]]
  },
  {
    "id": "data_router",
    "type": "function",
    "z": "main_flow",
    "name": "Data Distribution Router", 
    "func": "const data = msg.payload;\n\n// Status bar data\nnode.send([{\n  topic: \"status\",\n  payload: {\n    temp_f: data.room.temp_f,\n    sp_f: data.room.sp_f, \n    err_f: data.room.err_f,\n    time_s: data.sim.time_s,\n    rtx: data.sim.rtx,\n    cracs: data.crac,\n    alarms: data.alarms.length\n  }\n}, null, null, null, null]);\n\n// CRAC cards data\nnode.send([null, {\n  topic: \"cracs\",\n  payload: data.crac\n}, null, null, null]);\n\n// Alarms table data  \nnode.send([null, null, {\n  topic: \"alarms\",\n  payload: data.alarms\n}, null, null]);\n\n// KPIs data\nnode.send([null, null, null, {\n  topic: \"kpis\", \n  payload: data.kpi\n}, null]);\n\n// Events log\nif (data.alarms.length > 0) {\n  const event = `${new Date().toLocaleTimeString()} ALARM ${data.alarms[0].code} ${data.alarms[0].asset} ${data.alarms[0].state}`;\n  node.send([null, null, null, null, {\n    topic: \"events\",\n    payload: event\n  }]);\n}\n\nreturn null;",
    "outputs": 5,
    "noerr": 0,
    "x": 600,
    "y": 100,
    "wires": [["status_bar"], ["crac_cards"], ["alarms_table"], ["kpi_display"], ["events_log"]]
  },
  {
    "id": "chart_router",
    "type": "function", 
    "z": "main_flow",
    "name": "Chart Data Router",
    "func": "const data = msg.payload;\nconst ts = new Date().getTime();\n\n// Temperature chart\nnode.send([{\n  topic: \"room/temp_f\",\n  payload: data.room.temp_f\n}, null, null]);\n\nnode.send([{\n  topic: \"room/sp_f\", \n  payload: data.room.sp_f\n}, null, null]);\n\n// Controller output chart\nnode.send([null, {\n  topic: \"ctrl/out_pct\",\n  payload: data.ctrl.out_pct\n}, null]);\n\n// PID terms chart\nnode.send([null, null, {\n  topic: \"ctrl/p\",\n  payload: data.ctrl.p\n}]);\n\nnode.send([null, null, {\n  topic: \"ctrl/i\",\n  payload: data.ctrl.i  \n}]);\n\nnode.send([null, null, {\n  topic: \"ctrl/d\",\n  payload: data.ctrl.d\n}]);\n\nreturn null;",
    "outputs": 3,
    "noerr": 0, 
    "x": 600,
    "y": 220,
    "wires": [["temp_chart"], ["output_chart"], ["pid_chart"]]
  },
  {
    "id": "status_bar",
    "type": "ui_template",
    "z": "main_flow",
    "group": "status_group",
    "name": "Status Bar",
    "order": 1,
    "width": "12",
    "height": "2",
    "format": "<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 10px; background: linear-gradient(145deg, #2c3e50, #34495e); border: 2px solid #3498db; color: white;\">\n  <!-- Temperature Display -->\n  <div style=\"text-align: center;\">\n    <div style=\"font-size: 24px; font-weight: bold; color: #3498db;\">{{msg.payload.temp_f}}°F</div>\n    <div style=\"font-size: 12px; color: #bdc3c7;\">Zone Temp</div>\n  </div>\n  \n  <!-- Setpoint Display -->\n  <div style=\"text-align: center;\">\n    <div style=\"font-size: 18px; font-weight: bold; color: #95a5a6;\">{{msg.payload.sp_f}}°F</div>\n    <div style=\"font-size: 12px; color: #bdc3c7;\">Setpoint</div>\n  </div>\n  \n  <!-- Error Display -->\n  <div style=\"text-align: center;\">\n    <div style=\"font-size: 18px; font-weight: bold;\" ng-style=\"{'color': Math.abs(msg.payload.err_f) > 0.5 ? '#e74c3c' : '#27ae60'}\">{{msg.payload.err_f > 0 ? '+' : ''}}{{msg.payload.err_f}}°F</div>\n    <div style=\"font-size: 12px; color: #bdc3c7;\">Error</div>\n  </div>\n  \n  <!-- CRAC Status Badges -->\n  <div style=\"display: flex; gap: 10px;\">\n    <div ng-repeat=\"crac in msg.payload.cracs\" style=\"padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold;\"\n         ng-style=\"{'background': crac.role === 'LEAD' ? '#27ae60' : crac.role === 'LAG' ? '#3498db' : '#95a5a6', 'color': 'white'}\">\n      {{crac.id}}\n      <span ng-if=\"crac.alarm\" style=\"color: #e74c3c;\">●</span>\n    </div>\n  </div>\n  \n  <!-- Sim Time -->\n  <div style=\"text-align: center;\">\n    <div style=\"font-size: 16px; font-weight: bold; color: #f39c12;\">{{Math.floor(msg.payload.time_s/3600).toString().padStart(2,'0')}}:{{Math.floor((msg.payload.time_s%3600)/60).toString().padStart(2,'0')}}:{{(msg.payload.time_s%60).toString().padStart(2,'0')}}</div>\n    <div style=\"font-size: 12px; color: #bdc3c7;\">{{msg.payload.rtx}}× Real-time</div>\n  </div>\n  \n  <!-- Alarm Count -->\n  <div style=\"text-align: center;\">\n    <div style=\"font-size: 20px; font-weight: bold;\" ng-style=\"{'color': msg.payload.alarms > 0 ? '#e74c3c' : '#27ae60'}\">{{msg.payload.alarms}}</div>\n    <div style=\"font-size: 12px; color: #bdc3c7;\">Active Alarms</div>\n  </div>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "x": 820,
    "y": 60,
    "wires": [[]]
  },
  {
    "id": "crac_cards",
    "type": "ui_template", 
    "z": "main_flow",
    "group": "cracs_group",
    "name": "CRAC Equipment Cards",
    "order": 1,
    "width": "12",
    "height": "4",
    "format": "<div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; padding: 10px;\">\n  <div ng-repeat=\"crac in msg.payload\" style=\"border: 2px solid; border-radius: 8px; padding: 15px; background: #f8f9fa;\"\n       ng-style=\"{'border-color': crac.role === 'LEAD' ? '#27ae60' : crac.role === 'LAG' ? '#3498db' : '#95a5a6'}\">\n    \n    <!-- Header -->\n    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;\">\n      <h3 style=\"margin: 0; color: #2c3e50;\">{{crac.id}}</h3>\n      <span style=\"padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold; color: white;\"\n            ng-style=\"{'background': crac.role === 'LEAD' ? '#27ae60' : crac.role === 'LAG' ? '#3498db' : '#95a5a6'}\">{{crac.role}}</span>\n    </div>\n    \n    <!-- Status Indicator -->\n    <div style=\"display: flex; align-items: center; margin-bottom: 8px;\">\n      <div style=\"width: 12px; height: 12px; border-radius: 50%; margin-right: 8px;\"\n           ng-style=\"{'background': crac.on ? '#27ae60' : '#e74c3c'}\"></div>\n      <span style=\"font-weight: bold;\">{{crac.on ? 'RUNNING' : 'OFF'}}</span>\n      <span ng-if=\"crac.alarm\" style=\"margin-left: 10px; color: #e74c3c; font-weight: bold;\">⚠ ALARM</span>\n    </div>\n    \n    <!-- Metrics Grid -->\n    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 13px;\">\n      <div><strong>Output:</strong> {{crac.out_pct}}%</div>\n      <div><strong>Supply:</strong> {{crac.sup_f || '--'}}°F</div>\n      <div><strong>Runtime:</strong> {{crac.runtime_h}}h</div>\n      <div><strong>Starts:</strong> {{crac.starts}}</div>\n    </div>\n    \n    <!-- Output Bar -->\n    <div style=\"margin-top: 10px; background: #e9ecef; height: 6px; border-radius: 3px; overflow: hidden;\">\n      <div style=\"height: 100%; transition: width 0.3s ease;\"\n           ng-style=\"{'width': crac.out_pct + '%', 'background': crac.role === 'LEAD' ? '#27ae60' : crac.role === 'LAG' ? '#3498db' : '#95a5a6'}\"></div>\n    </div>\n  </div>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true, 
    "resendOnRefresh": true,
    "templateScope": "local",
    "x": 820,
    "y": 120,
    "wires": [[]]
  },
  {
    "id": "temp_chart",
    "type": "ui_chart",
    "z": "main_flow", 
    "name": "Temperature vs Setpoint",
    "group": "trends_group",
    "order": 1,
    "width": "6", 
    "height": "4",
    "label": "Temperature vs Setpoint",
    "chartType": "line",
    "legend": "true",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "No Data",
    "dot": false,
    "ymin": "70",
    "ymax": "75", 
    "removeOlder": "10",
    "removeOlderPoints": "",
    "removeOlderUnit": "60",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": ["#3498db", "#e74c3c"],
    "x": 820,
    "y": 200,
    "wires": [[]]
  },
  {
    "id": "output_chart",
    "type": "ui_chart",
    "z": "main_flow",
    "name": "Controller Output", 
    "group": "trends_group",
    "order": 2,
    "width": "6",
    "height": "4",
    "label": "Controller Output",
    "chartType": "line",
    "legend": "true", 
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "No Data",
    "dot": false,
    "ymin": "0",
    "ymax": "100",
    "removeOlder": "10",
    "removeOlderPoints": "",
    "removeOlderUnit": "60", 
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": ["#9b59b6"],
    "x": 820,
    "y": 240,
    "wires": [[]]
  },
  {
    "id": "pid_chart",
    "type": "ui_chart",
    "z": "main_flow",
    "name": "PID Terms",
    "group": "trends_group", 
    "order": 3,
    "width": "12",
    "height": "4",
    "label": "P/I/D Terms",
    "chartType": "line",
    "legend": "true",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "No Data",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": "10",
    "removeOlderPoints": "",
    "removeOlderUnit": "60",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false, 
    "colors": ["#e74c3c", "#f39c12", "#27ae60"],
    "x": 820,
    "y": 280,
    "wires": [[]]
  },
  {
    "id": "alarms_table",
    "type": "ui_template",
    "z": "main_flow",
    "group": "alarms_group",
    "name": "Active Alarms",
    "order": 1,
    "width": "12",
    "height": "3",
    "format": "<div style=\"background: white; border-radius: 6px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n  <!-- Header -->\n  <div style=\"background: #34495e; color: white; padding: 10px; font-weight: bold; display: grid; grid-template-columns: 80px 80px 120px 80px 80px; gap: 10px; font-size: 13px;\">\n    <div>Time</div>\n    <div>Priority</div>\n    <div>Code</div>\n    <div>Asset</div>\n    <div>State</div>\n  </div>\n  \n  <!-- No Alarms Message -->\n  <div ng-if=\"!msg.payload || msg.payload.length === 0\" style=\"padding: 20px; text-align: center; color: #27ae60; font-weight: bold;\">\n    ✅ No Active Alarms - System Normal\n  </div>\n  \n  <!-- Alarm Rows -->\n  <div ng-repeat=\"alarm in msg.payload\" style=\"display: grid; grid-template-columns: 80px 80px 120px 80px 80px; gap: 10px; padding: 8px 10px; border-bottom: 1px solid #ecf0f1; font-size: 12px; align-items: center;\"\n       ng-style=\"{'background': $index % 2 === 0 ? '#f8f9fa' : 'white'}\">\n    \n    <!-- Time -->\n    <div style=\"font-family: monospace;\">{{alarm.ts | date:'HH:mm:ss'}}</div>\n    \n    <!-- Priority Badge -->\n    <div>\n      <span style=\"padding: 2px 6px; border-radius: 10px; font-size: 10px; font-weight: bold; color: white;\"\n            ng-style=\"{'background': alarm.prio === 'HIGH' ? '#e74c3c' : alarm.prio === 'MEDIUM' ? '#f39c12' : '#27ae60'}\">{{alarm.prio}}</span>\n    </div>\n    \n    <!-- Code -->\n    <div style=\"font-weight: bold; color: #2c3e50;\">{{alarm.code}}</div>\n    \n    <!-- Asset -->\n    <div style=\"color: #7f8c8d;\">{{alarm.asset}}</div>\n    \n    <!-- State Badge -->\n    <div>\n      <span style=\"padding: 2px 6px; border-radius: 10px; font-size: 10px; font-weight: bold; color: white;\"\n            ng-style=\"{'background': alarm.state === 'ACTIVE' ? '#e74c3c' : alarm.state === 'ACK' ? '#f39c12' : '#27ae60'}\">{{alarm.state}}</span>\n    </div>\n  </div>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "x": 820, 
    "y": 180,
    "wires": [[]]
  },
  {
    "id": "kpi_display",
    "type": "ui_template",
    "z": "main_flow",
    "group": "kpis_group",
    "name": "Engineering KPIs",
    "order": 1,
    "width": "12",
    "height": "2",
    "format": "<div style=\"display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; padding: 15px; background: #ecf0f1; border-radius: 8px;\">\n  <!-- MAE -->\n  <div style=\"text-align: center; padding: 10px; background: white; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n    <div style=\"font-size: 24px; font-weight: bold; color: #3498db;\">{{msg.payload.mae_f}}°F</div>\n    <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Mean Absolute Error</div>\n  </div>\n  \n  <!-- In-Band % -->\n  <div style=\"text-align: center; padding: 10px; background: white; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n    <div style=\"font-size: 24px; font-weight: bold;\" ng-style=\"{'color': msg.payload.in_band_pct >= 95 ? '#27ae60' : '#f39c12'}\">{{msg.payload.in_band_pct}}%</div>\n    <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">In-Band (±0.5°F)</div>\n  </div>\n  \n  <!-- Saturation % -->\n  <div style=\"text-align: center; padding: 10px; background: white; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n    <div style=\"font-size: 24px; font-weight: bold;\" ng-style=\"{'color': msg.payload.sat_pct > 20 ? '#e74c3c' : '#27ae60'}\">{{msg.payload.sat_pct}}%</div>\n    <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Controller Saturation</div>\n  </div>\n  \n  <!-- Runtime Balance -->\n  <div style=\"text-align: center; padding: 10px; background: white; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n    <div style=\"font-size: 16px; font-weight: bold; color: #9b59b6;\">{{msg.payload.balance_pct[0]}} / {{msg.payload.balance_pct[1]}} / {{msg.payload.balance_pct[2]}}%</div>\n    <div style=\"font-size: 12px; color: #7f8c8d; margin-top: 4px;\">Runtime Balance</div>\n  </div>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "x": 820,
    "y": 320,
    "wires": [[]]
  },
  {
    "id": "scenario_selector",
    "type": "ui_dropdown",
    "z": "main_flow",
    "name": "Scenario Selection",
    "label": "Scenario:",
    "tooltip": "Select BAS simulation scenario",
    "place": "Select scenario",
    "group": "controls_group",
    "order": 1,
    "width": "6",
    "height": "1", 
    "passthru": true,
    "options": [
      {"label": "Baseline", "value": "baseline", "type": "str"},
      {"label": "Rising Load", "value": "rising_load", "type": "str"},
      {"label": "CRAC3 Failure", "value": "crac_failure", "type": "str"},
      {"label": "Sensor Drift", "value": "sensor_drift", "type": "str"}
    ],
    "payload": "",
    "topic": "scenario",
    "x": 180,
    "y": 400,
    "wires": [["scenario_handler"]]
  },
  {
    "id": "scenario_handler",
    "type": "function",
    "z": "main_flow",
    "name": "Scenario Handler", 
    "func": "context.set('scenario', msg.payload);\nnode.status({fill:\"blue\", shape:\"dot\", text:`Scenario: ${msg.payload}`});\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 380,
    "y": 400,
    "wires": [[]]
  },
  {
    "id": "events_log",
    "type": "ui_text",
    "z": "main_flow",
    "group": "controls_group",
    "order": 2,
    "width": "6", 
    "height": "4",
    "name": "Events Log",
    "label": "System Events:",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "x": 820,
    "y": 360,
    "wires": []
  },
  {
    "id": "main_flow",
    "type": "tab",
    "label": "BAS Production HMI",
    "disabled": false,
    "info": "Production-quality BAS HMI Dashboard\n\nFeatures:\n- 500ms update timer with rate limiting\n- Structured mock data generator\n- Professional status displays\n- Real-time trending charts\n- Engineering KPIs\n- Interactive scenario controls"
  }
]